#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-perms.txt #############################################
#### path: /var/www/ss-perms #######################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Resets all file and user permissions across the entire SlickStack server #############
#### module version: Ubuntu 20.04 LTS + WordPress 5.5.x ############################################
####################################################################################################

## include SlickStack configuration ##
source /var/www/ss-config

## include SlickStack functions ##
source /var/www/ss-functions

####################################################################################################
#### SS-Perms: Reset Ubuntu (System Files + Users/Groups) Permissions ##############################
####################################################################################################

## here we ensure permissions are safe for general system (Linux) files and otherwise ##
## since this is a single-user stack we can lock these down without issues ##

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-PERMS: Resetting all file permissions across entire SlickStack server...${NOCOLOR}"

## Ubuntu system files ##
chown root:root /etc/ssh/sshd_config ## must be root:root
chown root:root /etc/sudoers ## must be root:root
chown root:root /var/spool/cron/crontabs/root ## must be root:root
chown root:root /etc/sysctl.conf ## must be root:root
chmod 0644 /etc/ssh/sshd_config ## 0644 Ubuntu default
chmod 0440 /etc/sudoers ## 0440 Ubuntu default
chmod 0600 /var/spool/cron/crontabs/root ## must be 0600 or crontab will fail
chmod 0644 /etc/sysctl.conf ## 0644 Ubuntu default

## ensure wordpress group exists ##
addgroup wordpress 

## add SFTP_USER and www-data to wordpress group + add SFTP_USER to www-data group ##
adduser $SFTP_USER wordpress
adduser www-data wordpress
adduser $SFTP_USER www-data

## SSH public keys (optional) ##
mkdir /var/www/meta/.ssh
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh
chmod 0775 /var/www/meta/.ssh ## should be 0775 as per Ubuntu docs
touch /var/www/meta/.ssh/authorized_keys
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh/authorized_keys
chmod 0664 /var/www/meta/.ssh/authorized_keys ## should be 0664 as per Ubuntu docs

####################################################################################################
#### SS-Perms: Reset SlickStack Core Files Permissions #############################################
####################################################################################################

## SlickStack Core bash scripts and cron jobs are still executable by root regardless ##
## but these permissions help ensure consistency and better overall security ##

## ensure core directories exist (except html) ##
mkdir /var/www
mkdir /var/www/cache
mkdir /var/www/cache/fastcgi
mkdir /var/www/cache/opcache
mkdir /var/www/logs
mkdir /var/www/meta
mkdir /var/www/meta/.ssh

## ensure misc files exist (makes things look pretty and suppresses error messages) ##
if [[ ! -f "/var/www/meta/wp.sql" ]]; then 
    touch "/var/www/meta/wp.sql"; 
fi

## chroot (SFTP) user directory ##
chown root:root /var ## must be root:root
chown root:root /var/www ## must be root:root
chmod 0755 /var/www ## must be 0755

## SlickStack core scripts ##
chown root:root /var/www/*cron* ## must be root:root
chown root:root /var/www/ss* ## must be root:root
chmod 0740 /var/www/*cron* ## 0740 is enough
chmod 0740 /var/www/ss* ## 0740 is enough

## SQL dump file (we want SFTP users to be able to access) ##
chown -R $SFTP_USER:www-data /var/www/meta/wp.sql ## $SFTP_USER:www-data to better support SFTP access
chmod 0640 /var/www/meta/wp.sql ## 0640 should be enough (or 644)

## no worries if the SFTP user accesses this stuff (but www-data access is the priority) ##
chown www-data:www-data /var/www/cache ## must be www-data:www-data
chown www-data:www-data /var/www/cache/fastcgi ## must be www-data:www-data
chown www-data:www-data /var/www/cache/opcache ## must be www-data:www-data
chown www-data:www-data /var/www/logs ## must be www-data:www-data
chown www-data:www-data /var/www/meta ## must be www-data:www-data
chmod 0755 /var/www/cache ## 775 should also work
chmod 0755 /var/www/cache/fastcgi ## 775 should also work
chmod 0755 /var/www/cache/opcache ## 755 should also work
chmod 0755 /var/www/logs ## 755 should also work
chmod 0755 /var/www/meta ## 755 should also work

## ensure log files exist ##
if [ ! -f "/var/www/logs/clamav.log" ]; then touch "/var/www/logs/clamav.log"; fi
if [ ! -f "/var/www/logs/cron.log" ]; then touch "/var/www/logs/cron.log"; fi
if [ ! -f "/var/www/logs/error.log" ]; then touch "/var/www/logs/error.log"; fi
if [ ! -f "/var/www/logs/mysql-gen.log" ]; then touch "/var/www/logs/mysql-gen.log"; fi
if [ ! -f "/var/www/logs/mysql-error.log" ]; then touch "/var/www/logs/mysql-error.log"; fi
if [ ! -f "/var/www/logs/mysql-slow.log" ]; then touch "/var/www/logs/mysql-slow.log"; fi
if [ ! -f "/var/www/logs/nginx.log" ]; then touch "/var/www/logs/nginx.log"; fi
if [ ! -f "/var/www/logs/redis.log" ]; then touch "/var/www/logs/redis.log"; fi

## individual log files ##
chown clamav:clamav /var/www/logs/clamav*.log*
chown root:root /var/www/logs/cron*.log*
chown www-data:www-data /var/www/logs/error*.log*
chown mysql:mysql /var/www/logs/mysql*.log*
chown www-data:www-data /var/www/logs/nginx*.log*
chown redis:redis /var/www/logs/redis*.log*

chmod 0644 /var/www/logs/*.log ## 6755 should also work

## ensure unix formatting (avoids syntax errors and otherwise) ##
# dos2unix /var/www/*cron*
# dos2unix /var/www/ss*

####################################################################################################
#### SS-Perms: Adminer Permissions #################################################################
####################################################################################################

chmod 0664 /var/www/meta/adminer.php &> /dev/null

####################################################################################################
#### SS-Perms: Reset Permissions (Public HTML Directory) ###########################################
####################################################################################################

## SNIPPET: ss-perms 

## ensure critical files and directories exist (will not overwrite) ##
mkdir /var/www/html
mkdir /var/www/html/.well-known
mkdir /var/www/html/.well-known/acme-challenge
mkdir /var/www/html/wp-content
mkdir /var/www/html/wp-content/languages
mkdir /var/www/html/wp-content/mu-plugins
mkdir /var/www/html/wp-content/temp
mkdir /var/www/html/wp-content/uploads
mkdir /var/www/html/wp-content/upgrade

## ensure staging/dev directories exist (will not overwrite) ##
mkdir /var/www/html/staging
mkdir /var/www/html/dev

## ensure files exist (production only because ss-sync will copy to staging) ##
if [ ! -f "/var/www/html/wp-content/blacklist.txt" ]; then touch "/var/www/html/wp-content/blacklist.txt"; fi
if [ ! -f "/var/www/html/wp-content/functions.php" ]; then touch "/var/www/html/wp-content/functions.php"; fi

## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
chown -R $SFTP_USER:www-data /var/www/html/.well-known
chmod 0755 /var/www/html/.well-known

####################################################################################################
#### SS-Perms: Reset Permissions (WordPress Core) ##################################################
####################################################################################################

## run ss-perms-wordpress-core ##
source /var/www/ss-perms-wordpress-core

####################################################################################################
#### SS-Perms: Reset Permissions (WordPress MU Plugins) ############################################
####################################################################################################

## run ss-perms-wordpress-mu-plugins ##
source /var/www/ss-perms-wordpress-mu-plugins

####################################################################################################
#### Reset Permissions: SlickStack (LEMP) Modules ##################################################
####################################################################################################

mkdir /var/run/mysqld
mkdir /var/run/php
mkdir /var/run/redis

####################################################################################################
#### SS-Perms: Reset Permissions (Nginx) ###########################################################
####################################################################################################

## run ss-perms-nginx ##
source /var/www/ss-perms-nginx




## reset MySQL permissions ##
chown mysql:mysql /var/run/mysqld
chown root:root /etc/mysql/my.cnf
chown root:root /etc/mysql/mysql.cnf
chown root:root /etc/mysql/mysql.conf.d/mysqld.cnf
chmod 0755 /etc/mysql/my.cnf

## always run WP-CLI as the www-data user (and allow SFTP user to run it) ##
chown root:root /usr/local/bin/ &> /dev/null
chown www-data:www-data /usr/local/bin/wp &> /dev/null
chmod 0755 /usr/local/bin/wp &> /dev/null

####################################################################################################
#### SS-Perms: Reset Permissions (PHP-FPM) #########################################################
####################################################################################################

## run ss-perms-php ##
source /var/www/ss-perms-php

####################################################################################################
#### SS-Perms: Reset Permissions (Redis) ###########################################################
####################################################################################################

chown redis:redis /var/run/redis &> /dev/null
chown redis:redis /etc/redis/redis.conf &> /dev/null

####################################################################################################
#### SS-Perms: Flush Redis (Object Cache) ##########################################################
####################################################################################################

redis-cli flushall &> /dev/null

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: http://www.unixmantra.com/2013/04/unix-linux-file-permissions.html
## Ref: https://unix.stackexchange.com/questions/203371/run-script-sh-vs-bash-script-sh-permission-denied/203372#203372
## Ref: https://stackoverflow.com/questions/14372645/convert-dos2unix-line-endings-for-all-files-in-a-directory/19284034#19284034
## Ref: https://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory/11929475#11929475
## Ref: https://unix.stackexchange.com/questions/310432/bash-script-to-convert-all-files-of-a-given-type-from-unix-to-dos-format/310437#310437
## Ref: https://kb.iu.edu/d/acux
## Ref: https://stackoverflow.com/questions/2613800/how-to-convert-dos-windows-newline-crlf-to-unix-newline-lf-in-a-bash-script
## Ref: https://github.com/wp-cli/wp-cli/issues/3181
## Ref: https://github.com/wp-cli/wp-cli/issues/1241
## Ref: https://www.alexgeorgiou.gr/wp-cli-www-data-user-permissions-linux/
## Ref: https://www.darklaunch.com/php-normalize-newlines-line-endings-crlf-cr-lf-unix-windows-mac
## Ref: https://serverfault.com/questions/344544/what-is-the-first-digit-for-in-4-digit-octal-unix-file-permission-notation
## Ref: https://unix.stackexchange.com/questions/79395/how-does-the-sticky-bit-work
## Ref: https://superuser.com/questions/684213/why-are-execute-permissions-along-with-write-permissions-needed-for-creating-a-f
## Ref: https://ubuntuforums.org/showthread.php?t=2383638
## Ref: https://serverfault.com/questions/584986/bad-ownership-or-modes-for-chroot-directory-component
## Ref: https://stackoverflow.com/questions/6851909/how-do-i-delete-everything-in-redis
## Ref: https://serverfault.com/questions/888653/correct-web-user-for-php-fpm-under-nginx
## Ref: https://askubuntu.com/questions/25681/can-scripts-run-even-when-they-are-not-set-as-executable
## Ref: https://serverfault.com/questions/616788/nginx-403-forbidden-on-some-files-extensions
## Ref: https://serverfault.com/questions/686357/unable-to-open-jpeg-files-with-nginx
## Ref: https://askubuntu.com/questions/831414/what-is-the-difference-between-touch-file-and-file
## Ref: https://bash.cyberciti.biz/guide/Setting_up_permissions_on_a_script
## Ref: http://bazaar.launchpad.net/~ubuntu-branches/ubuntu/raring/cron/raring/view/head:/database.c#L380
## Ref: https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working
## Ref: https://unix.stackexchange.com/questions/358112/permissions-error-with-wordpress
## Ref: https://webinoly.com/support/975/chown-problem?show=975

## SS_EOF
