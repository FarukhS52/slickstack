#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: https://mirrors.slickstack.io/bash/ss-check.txt #######################################
#### path: /var/www/ss-check #######################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Retrieves latest ss core cron jobs and ss core bash scripts (except ss-check) ########
#### module version: Ubuntu 20.04 LTS ##############################################################
#### sourced by: ss-install, ss-update #############################################################
#### bash aliases: ss check ########################################################################
####################################################################################################

## source ss-config ##
source /var/www/ss-config

## source ss-functions ##
source /var/www/ss-functions

## BELOW THIS RELIES ON SS-CONFIG AND SS-FUNCTIONS

####################################################################################################
#### TABLE OF CONTENTS (SS-Check) ##################################################################
####################################################################################################

## A. Touch Timestamp File
## B. Message (Begin Script)
## C. Cleanup Temporary Files
## D. Retrieve Cron Jobs
## E. Retrieve Bash Scripts (Except SS-Check)
## F. Install Cron Jobs 
## G. Install Bash Scripts (Except SS-Check)
## H. Reset Permissions (SlickStack Core)
## I. Cleanup Temporary Files

####################################################################################################
#### A. SS-Check: Touch Timestamp File #############################################################
####################################################################################################

## this is a dummy timestamp file that will remember the last time this script was run ##
## it can be useful for developer reference and is sometimes used by SlickStack ##

## script timestamp ##
touch "$TIMESTAMP_SS_CHECK"

####################################################################################################
#### B. SS-Check: Message (Begin Script) ###########################################################
####################################################################################################

## this is a simple message that announces to the shell the purpose of this bash script ##
## it will only be noticed by sudo users who manually call ss core bash scripts ##

## echo message ##
echo -e "${PURPLE}Running ss-check: Retrieves latest ss core cron jobs and ss core bash scripts (except ss-check)... ${NOCOLOR}"
sleep "$SLEEP_MESSAGE_BEGIN"

####################################################################################################
#### C. SS-Check: Cleanup Temporary Files ##########################################################
####################################################################################################

## we briefly cleanup any leftover temporarily files that are relevant to this script ##
## this is performed before and after associated code runs to avoid conflicts ##

## delete tmp files ##
rm /tmp/ss*
rm /tmp/*cron*

####################################################################################################
#### D. SS-Check: Retrieve Cron Jobs ###############################################################
####################################################################################################

## here we retrieve all the latest ss core cron jobs and bash scripts to keep them updated ##
## this process does not affect ss-config or LEMP modules, nor the ss-check file ##

## 00-crontab ##
ss_wget_fast -O "$TMP_00_CRONTAB" "$MIRROR_00_CRONTAB"
VALIDATE_TMP_00_CRONTAB=$(grep 'SS_EOF' "${TMP_00_CRONTAB}")
if [[ -z "$VALIDATE_TMP_00_CRONTAB" ]]; then
    ss_wget_slow -O "$TMP_00_CRONTAB" "$MIRROR2_00_CRONTAB"
fi

## 01-cron-often ##
ss_wget_fast -O "$TMP_01_CRON_OFTEN" "$MIRROR_01_CRON_OFTEN"
VALIDATE_TMP_01_CRON_OFTEN=$(grep 'SS_EOF' "${TMP_01_CRON_OFTEN}")
if [[ -z "$VALIDATE_TMP_01_CRON_OFTEN" ]]; then
    ss_wget_slow -O "$TMP_01_CRON_OFTEN" "$MIRROR2_01_CRON_OFTEN"
fi

## 02-cron-regular ##
ss_wget_fast -O "$TMP_02_CRON_REGULAR" "$MIRROR_02_CRON_REGULAR"
VALIDATE_TMP_02_CRON_REGULAR=$(grep 'SS_EOF' "${TMP_02_CRON_REGULAR}")
if [[ -z "$VALIDATE_TMP_02_CRON_REGULAR" ]]; then
    ss_wget_slow -O "$TMP_02_CRON_REGULAR" "$MIRROR2_02_CRON_REGULAR"
fi

## 03-cron-quarter-hourly ##
ss_wget_fast -O "$TMP_03_CRON_QUARTER_HOURLY" "$MIRROR_03_CRON_QUARTER_HOURLY"
VALIDATE_TMP_03_CRON_QUARTER_HOURLY=$(grep 'SS_EOF' "${TMP_03_CRON_QUARTER_HOURLY}")
if [[ -z "$VALIDATE_TMP_03_CRON_QUARTER_HOURLY" ]]; then
    ss_wget_slow -O "$TMP_03_CRON_QUARTER_HOURLY" "$MIRROR2_03_CRON_QUARTER_HOURLY"
fi

## 04-cron-half-hourly ##
ss_wget_fast -O "$TMP_04_CRON_HALF_HOURLY" "$MIRROR_04_CRON_HALF_HOURLY"
VALIDATE_TMP_04_CRON_HALF_HOURLY=$(grep 'SS_EOF' "${TMP_04_CRON_HALF_HOURLY}")
if [[ -z "$VALIDATE_TMP_04_CRON_HALF_HOURLY" ]]; then
    ss_wget_slow -O "$TMP_04_CRON_HALF_HOURLY" "$MIRROR2_04_CRON_HALF_HOURLY"
fi

## 05-cron-hourly ##
ss_wget_fast -O "$TMP_05_CRON_HOURLY" "$MIRROR_05_CRON_HOURLY"
VALIDATE_TMP_05_CRON_HOURLY=$(grep 'SS_EOF' "${TMP_05_CRON_HOURLY}")
if [[ -z "$VALIDATE_TMP_05_CRON_HOURLY" ]]; then
    ss_wget_slow -O "$TMP_05_CRON_HOURLY" "$MIRROR2_05_CRON_HOURLY"
fi

## 06-cron-quarter-daily ##
ss_wget_fast -O "$TMP_06_CRON_QUARTER_DAILY" "$MIRROR_06_CRON_QUARTER_DAILY"
VALIDATE_TMP_06_CRON_QUARTER_DAILY=$(grep 'SS_EOF' "${TMP_06_CRON_QUARTER_DAILY}")
if [[ -z "$VALIDATE_TMP_06_CRON_QUARTER_DAILY" ]]; then
    ss_wget_slow -O "$TMP_06_CRON_QUARTER_DAILY" "$MIRROR2_06_CRON_QUARTER_DAILY"
fi

## 07-cron-half-daily ##
ss_wget_fast -O "$TMP_07_CRON_HALF_DAILY" "$MIRROR_07_CRON_HALF_DAILY"
VALIDATE_TMP_07_CRON_HALF_DAILY=$(grep 'SS_EOF' "${TMP_07_CRON_HALF_DAILY}")
if [[ -z "$VALIDATE_TMP_07_CRON_HALF_DAILY" ]]; then
    ss_wget_slow -O "$TMP_07_CRON_HALF_DAILY" "$MIRROR2_07_CRON_HALF_DAILY"
fi

## 08-cron-daily ##
ss_wget_fast -O "$TMP_08_CRON_DAILY" "$MIRROR_08_CRON_DAILY"
VALIDATE_TMP_08_CRON_DAILY=$(grep 'SS_EOF' "${TMP_08_CRON_DAILY}")
if [[ -z "$VALIDATE_TMP_08_CRON_DAILY" ]]; then
    ss_wget_slow -O "$TMP_08_CRON_DAILY" "$MIRROR2_08_CRON_DAILY"
fi

## 09-cron-half-weekly ##
ss_wget_fast -O "$TMP_09_CRON_HALF_WEEKLY" "$MIRROR_09_CRON_HALF_WEEKLY"
VALIDATE_TMP_09_CRON_HALF_WEEKLY=$(grep 'SS_EOF' "${TMP_09_CRON_HALF_WEEKLY}")
if [[ -z "$VALIDATE_TMP_09_CRON_HALF_WEEKLY" ]]; then
    ss_wget_slow -O "$TMP_09_CRON_HALF_WEEKLY" "$MIRROR2_09_CRON_HALF_WEEKLY"
fi

## 10-cron-weekly ##
ss_wget_fast -O "$TMP_10_CRON_WEEKLY" "$MIRROR_10_CRON_WEEKLY"
VALIDATE_TMP_10_CRON_WEEKLY=$(grep 'SS_EOF' "${TMP_10_CRON_WEEKLY}")
if [[ -z "$VALIDATE_TMP_10_CRON_WEEKLY" ]]; then
    ss_wget_slow -O "$TMP_10_CRON_WEEKLY" "$MIRROR2_10_CRON_WEEKLY"
fi

## 11-cron-half-monthly ##
ss_wget_fast -O "$TMP_11_CRON_HALF_MONTHLY" "$MIRROR_11_CRON_HALF_MONTHLY"
VALIDATE_TMP_11_CRON_HALF_MONTHLY=$(grep 'SS_EOF' "${TMP_11_CRON_HALF_MONTHLY}")
if [[ -z "$VALIDATE_TMP_11_CRON_HALF_MONTHLY" ]]; then
    ss_wget_slow -O "$TMP_11_CRON_HALF_MONTHLY" "$MIRROR2_11_CRON_HALF_MONTHLY"
fi

## 12-cron-monthly ##
ss_wget_fast -O "$TMP_12_CRON_MONTHLY" "$MIRROR_12_CRON_MONTHLY"
VALIDATE_TMP_12_CRON_MONTHLY=$(grep 'SS_EOF' "${TMP_12_CRON_MONTHLY}")
if [[ -z "$VALIDATE_TMP_12_CRON_MONTHLY" ]]; then
    ss_wget_slow -O "$TMP_12_CRON_MONTHLY" "$MIRROR2_12_CRON_MONTHLY"
fi

## 13-cron-sometimes ##
ss_wget_fast -O "$TMP_13_CRON_SOMETIMES" "$MIRROR_13_CRON_SOMETIMES"
VALIDATE_TMP_13_CRON_SOMETIMES=$(grep 'SS_EOF' "${TMP_13_CRON_SOMETIMES}")
if [[ -z "$VALIDATE_TMP_13_CRON_SOMETIMES" ]]; then
    ss_wget_slow -O "$TMP_13_CRON_SOMETIMES" "$MIRROR2_13_CRON_SOMETIMES"
fi

####################################################################################################
#### E. SS-Check: Retrieve Bash Scripts (Except SS-Check) ##########################################
####################################################################################################

## here we retrieve all the latest ss core cron jobs and bash scripts to keep them updated ##
## this process does not affect ss-config or LEMP modules, nor the ss-check file ##

## ss-clean-database ##
ss_wget_fast -O "$TMP_SS_CLEAN_DATABASE" "$MIRROR_SS_CLEAN_DATABASE"
VALIDATE_TMP_SS_CLEAN_DATABASE=$(grep 'SS_EOF' "${TMP_SS_CLEAN_DATABASE}")
if [[ -z "$VALIDATE_TMP_SS_CLEAN_DATABASE" ]]; then
    ss_wget_slow -O "$TMP_SS_CLEAN_DATABASE" "$MIRROR2_SS_CLEAN_DATABASE"
fi

## ss-clean-files ##
ss_wget_fast -O "$TMP_SS_CLEAN_FILES" "$MIRROR_SS_CLEAN_FILES"
VALIDATE_TMP_SS_CLEAN_FILES=$(grep 'SS_EOF' "${TMP_SS_CLEAN_FILES}")
if [[ -z "$VALIDATE_TMP_SS_CLEAN_FILES" ]]; then
    ss_wget_slow -O "$TMP_SS_CLEAN_FILES" "$MIRROR2_SS_CLEAN_FILES"
fi

## ss-config-sample ##
ss_wget_fast -O "$TMP_SS_CONFIG_SAMPLE" "$MIRROR_SS_CONFIG_SAMPLE"
VALIDATE_TMP_SS_CONFIG_SAMPLE=$(grep 'SS_EOF' "${TMP_SS_CONFIG_SAMPLE}")
if [[ -z "$VALIDATE_TMP_SS_CONFIG_SAMPLE" ]]; then
    ss_wget_slow -O "$TMP_SS_CONFIG_SAMPLE" "$MIRROR2_SS_CONFIG_SAMPLE"
fi

## ss-delete-database ##
ss_wget_fast -O "$TMP_SS_DELETE_DATABASE" "$MIRROR_SS_DELETE_DATABASE"
VALIDATE_TMP_SS_DELETE_DATABASE=$(grep 'SS_EOF' "${TMP_SS_DELETE_DATABASE}")
if [[ -z "$VALIDATE_TMP_SS_DELETE_DATABASE" ]]; then
    ss_wget_slow -O "$TMP_SS_DELETE_DATABASE" "$MIRROR2_SS_DELETE_DATABASE"
fi

## ss-delete-files ##
ss_wget_fast -O "$TMP_SS_DELETE_FILES" "$MIRROR_SS_DELETE_FILES"
VALIDATE_TMP_SS_DELETE_FILES=$(grep 'SS_EOF' "${TMP_SS_DELETE_FILES}")
if [[ -z "$VALIDATE_TMP_SS_DELETE_FILES" ]]; then
    ss_wget_slow -O "$TMP_SS_DELETE_FILES" "$MIRROR2_SS_DELETE_FILES"
fi

## ss-dump-database ##
ss_wget_fast -O "$TMP_SS_DUMP_DATABASE" "$MIRROR_SS_DUMP_DATABASE"
VALIDATE_TMP_SS_DUMP_DATABASE=$(grep 'SS_EOF' "${TMP_SS_DUMP_DATABASE}")
if [[ -z "$VALIDATE_TMP_SS_DUMP_DATABASE" ]]; then
    ss_wget_slow -O "$TMP_SS_DUMP_DATABASE" "$MIRROR2_SS_DUMP_DATABASE"
fi

## ss-dump-files ##
ss_wget_fast -O "$TMP_SS_DUMP_FILES" "$MIRROR_SS_DUMP_FILES"
VALIDATE_TMP_SS_DUMP_FILES=$(grep 'SS_EOF' "${TMP_SS_DUMP_FILES}")
if [[ -z "$VALIDATE_TMP_SS_DUMP_FILES" ]]; then
    ss_wget_slow -O "$TMP_SS_DUMP_FILES" "$MIRROR2_SS_DUMP_FILES"
fi

## ss-empty-logs ##
ss_wget_fast -O "$TMP_SS_EMPTY_LOGS" "$MIRROR_SS_EMPTY_LOGS"
VALIDATE_TMP_SS_EMPTY_LOGS=$(grep 'SS_EOF' "${TMP_SS_EMPTY_LOGS}")
if [[ -z "$VALIDATE_TMP_SS_EMPTY_LOGS" ]]; then
    ss_wget_slow -O "$TMP_SS_EMPTY_LOGS" "$MIRROR2_SS_EMPTY_LOGS"
fi

## ss-encrypt-acme ##
ss_wget_fast -O "$TMP_SS_ENCRYPT_ACME" "$MIRROR_SS_ENCRYPT_ACME"
VALIDATE_TMP_SS_ENCRYPT_ACME=$(grep 'SS_EOF' "${TMP_SS_ENCRYPT_ACME}")
if [[ -z "$VALIDATE_TMP_SS_ENCRYPT_ACME" ]]; then
    ss_wget_slow -O "$TMP_SS_ENCRYPT_ACME" "$MIRROR2_SS_ENCRYPT_ACME"
fi

## ss-encrypt-certbot ##
ss_wget_fast -O "$TMP_SS_ENCRYPT_CERTBOT" "$MIRROR_SS_ENCRYPT_CERTBOT"
VALIDATE_TMP_SS_ENCRYPT_CERTBOT=$(grep 'SS_EOF' "${TMP_SS_ENCRYPT_CERTBOT}")
if [[ -z "$VALIDATE_TMP_SS_ENCRYPT_CERTBOT" ]]; then
    ss_wget_slow -O "$TMP_SS_ENCRYPT_CERTBOT" "$MIRROR2_SS_ENCRYPT_CERTBOT"
fi

## ss-encrypt-openssl ##
ss_wget_fast -O "$TMP_SS_ENCRYPT_OPENSSL" "$MIRROR_SS_ENCRYPT_OPENSSL"
VALIDATE_TMP_SS_ENCRYPT_OPENSSL=$(grep 'SS_EOF' "${TMP_SS_ENCRYPT_OPENSSL}")
if [[ -z "$VALIDATE_TMP_SS_ENCRYPT_OPENSSL" ]]; then
    ss_wget_slow -O "$TMP_SS_ENCRYPT_OPENSSL" "$MIRROR2_SS_ENCRYPT_OPENSSL"
fi

## ss-functions ##
ss_wget_fast -O "$TMP_SS_FUNCTIONS" "$MIRROR_SS_FUNCTIONS"
VALIDATE_TMP_SS_FUNCTIONS=$(grep 'SS_EOF' "${TMP_SS_FUNCTIONS}")
if [[ -z "$VALIDATE_TMP_SS_FUNCTIONS" ]]; then
    ss_wget_slow -O "$TMP_SS_FUNCTIONS" "$MIRROR2_SS_FUNCTIONS"
fi

## ss-import-database ##
ss_wget_fast -O "$TMP_SS_IMPORT_DATABASE" "$MIRROR_SS_IMPORT_DATABASE"
VALIDATE_TMP_SS_IMPORT_DATABASE=$(grep 'SS_EOF' "${TMP_SS_IMPORT_DATABASE}")
if [[ -z "$VALIDATE_TMP_SS_IMPORT_DATABASE" ]]; then
    ss_wget_slow -O "$TMP_SS_IMPORT_DATABASE" "$MIRROR2_SS_IMPORT_DATABASE"
fi

## ss-import-files ##
ss_wget_fast -O "$TMP_SS_IMPORT_FILES" "$MIRROR_SS_IMPORT_FILES"
VALIDATE_TMP_SS_IMPORT_FILES=$(grep 'SS_EOF' "${TMP_SS_IMPORT_FILES}")
if [[ -z "$VALIDATE_TMP_SS_IMPORT_FILES" ]]; then
    ss_wget_slow -O "$TMP_SS_IMPORT_FILES" "$MIRROR2_SS_IMPORT_FILES"
fi

## ss-install ##
ss_wget_fast -O "$TMP_SS_INSTALL" "$MIRROR_SS_INSTALL"
VALIDATE_TMP_SS_INSTALL=$(grep 'SS_EOF' "${TMP_SS_INSTALL}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL" "$MIRROR2_SS_INSTALL"
fi

## ss-install-adminer ##
ss_wget_fast -O "$TMP_SS_INSTALL_ADMINER" "$MIRROR_SS_INSTALL_ADMINER"
VALIDATE_TMP_SS_INSTALL_ADMINER=$(grep 'SS_EOF' "${TMP_SS_INSTALL_ADMINER}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_ADMINER" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_ADMINER" "$MIRROR2_SS_INSTALL_ADMINER"
fi

## ss-install-clamav ##
ss_wget_fast -O "$TMP_SS_INSTALL_CLAMAV" "$MIRROR_SS_INSTALL_CLAMAV"
VALIDATE_TMP_SS_INSTALL_CLAMAV=$(grep 'SS_EOF' "${TMP_SS_INSTALL_CLAMAV}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_CLAMAV" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_CLAMAV" "$MIRROR2_SS_INSTALL_CLAMAV"
fi

## ss-install-craft-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_CRAFT_CONFIG" "$MIRROR_SS_INSTALL_CRAFT_CONFIG"
VALIDATE_TMP_SS_INSTALL_CRAFT_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_CRAFT_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_CRAFT_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_CRAFT_CONFIG" "$MIRROR2_SS_INSTALL_CRAFT_CONFIG"
fi

## ss-install-craft-core ##
ss_wget_fast -O "$TMP_SS_INSTALL_CRAFT_CORE" "$MIRROR_SS_INSTALL_CRAFT_CORE"
VALIDATE_TMP_SS_INSTALL_CRAFT_CORE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_CRAFT_CORE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_CRAFT_CORE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_CRAFT_CORE" "$MIRROR2_SS_INSTALL_CRAFT_CORE"
fi

## ss-install-magento-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_MAGENTO_CONFIG" "$MIRROR_SS_INSTALL_MAGENTO_CONFIG"
VALIDATE_TMP_SS_INSTALL_MAGENTO_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MAGENTO_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MAGENTO_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MAGENTO_CONFIG" "$MIRROR2_SS_INSTALL_MAGENTO_CONFIG"
fi

## ss-install-magento-core ##
ss_wget_fast -O "$TMP_SS_INSTALL_MAGENTO_CORE" "$MIRROR_SS_INSTALL_MAGENTO_CORE"
VALIDATE_TMP_SS_INSTALL_MAGENTO_CORE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MAGENTO_CORE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MAGENTO_CORE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MAGENTO_CORE" "$MIRROR2_SS_INSTALL_MAGENTO_CORE"
fi

## ss-install-mediawiki-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_MEDIAWIKI_CONFIG" "$MIRROR_SS_INSTALL_MEDIAWIKI_CONFIG"
VALIDATE_TMP_SS_INSTALL_MEDIAWIKI_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MEDIAWIKI_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MEDIAWIKI_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MEDIAWIKI_CONFIG" "$MIRROR2_SS_INSTALL_MEDIAWIKI_CONFIG"
fi

## ss-install-mediawiki-core ##
ss_wget_fast -O "$TMP_SS_INSTALL_MEDIAWIKI_CORE" "$MIRROR_SS_INSTALL_MEDIAWIKI_CORE"
VALIDATE_TMP_SS_INSTALL_MEDIAWIKI_CORE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MEDIAWIKI_CORE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MEDIAWIKI_CORE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MEDIAWIKI_CORE" "$MIRROR2_SS_INSTALL_MEDIAWIKI_CORE"
fi

## ss-install-moodle-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_MOODLE_CONFIG" "$MIRROR_SS_INSTALL_MOODLE_CONFIG"
VALIDATE_TMP_SS_INSTALL_MOODLE_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MOODLE_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MOODLE_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MOODLE_CONFIG" "$MIRROR2_SS_INSTALL_MOODLE_CONFIG"
fi

## ss-install-moodle-core ##
ss_wget_fast -O "$TMP_SS_INSTALL_MOODLE_CORE" "$MIRROR_SS_INSTALL_MOODLE_CORE"
VALIDATE_TMP_SS_INSTALL_MOODLE_CORE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MOODLE_CORE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MOODLE_CORE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MOODLE_CORE" "$MIRROR2_SS_INSTALL_MOODLE_CORE"
fi

## ss-install-mysql-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_MYSQL_CONFIG" "$MIRROR_SS_INSTALL_MYSQL_CONFIG"
VALIDATE_TMP_SS_INSTALL_MYSQL_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MYSQL_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MYSQL_CONFIG" "$MIRROR2_SS_INSTALL_MYSQL_CONFIG"
fi

## ss-install-mysql-database ##
ss_wget_fast -O "$TMP_SS_INSTALL_MYSQL_DATABASE" "$MIRROR_SS_INSTALL_MYSQL_DATABASE"
VALIDATE_TMP_SS_INSTALL_MYSQL_DATABASE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_DATABASE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MYSQL_DATABASE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MYSQL_DATABASE" "$MIRROR2_SS_INSTALL_MYSQL_DATABASE"
fi

## ss-install-mysql-packages ##
ss_wget_fast -O "$TMP_SS_INSTALL_MYSQL_PACKAGES" "$MIRROR_SS_INSTALL_MYSQL_PACKAGES"
VALIDATE_TMP_SS_INSTALL_MYSQL_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_PACKAGES}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_MYSQL_PACKAGES" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_MYSQL_PACKAGES" "$MIRROR2_SS_INSTALL_MYSQL_PACKAGES"
fi

## ss-install-nginx-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_NGINX_CONFIG" "$MIRROR_SS_INSTALL_NGINX_CONFIG"
VALIDATE_TMP_SS_INSTALL_NGINX_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_NGINX_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_NGINX_CONFIG" "$MIRROR2_SS_INSTALL_NGINX_CONFIG"
fi

## ss-install-nginx-letsencrypt ##
ss_wget_fast -O "$TMP_SS_INSTALL_NGINX_LETSENCRYPT" "$MIRROR_SS_INSTALL_NGINX_LETSENCRYPT"
VALIDATE_TMP_SS_INSTALL_NGINX_LETSENCRYPT=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_LETSENCRYPT}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_NGINX_LETSENCRYPT" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_NGINX_LETSENCRYPT" "$MIRROR2_SS_INSTALL_NGINX_LETSENCRYPT"
fi

## ss-install-nginx-openssl ##
ss_wget_fast -O "$TMP_SS_INSTALL_NGINX_OPENSSL" "$MIRROR_SS_INSTALL_NGINX_OPENSSL"
VALIDATE_TMP_SS_INSTALL_NGINX_OPENSSL=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_OPENSSL}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_NGINX_OPENSSL" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_NGINX_OPENSSL" "$MIRROR2_SS_INSTALL_NGINX_OPENSSL"
fi

## ss-install-nginx-packages ##
ss_wget_fast -O "$TMP_SS_INSTALL_NGINX_PACKAGES" "$MIRROR_SS_INSTALL_NGINX_PACKAGES"
VALIDATE_TMP_SS_INSTALL_NGINX_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_PACKAGES}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_NGINX_PACKAGES" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_NGINX_PACKAGES" "$MIRROR2_SS_INSTALL_NGINX_PACKAGES"
fi

## ss-install-nginx-ssl ##
ss_wget_fast -O "$TMP_SS_INSTALL_NGINX_SSL" "$MIRROR_SS_INSTALL_NGINX_SSL"
VALIDATE_TMP_SS_INSTALL_NGINX_SSL=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_SSL}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_NGINX_SSL" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_NGINX_SSL" "$MIRROR2_SS_INSTALL_NGINX_SSL"
fi

## ss-install-opencart-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_OPENCART_CONFIG" "$MIRROR_SS_INSTALL_OPENCART_CONFIG"
VALIDATE_TMP_SS_INSTALL_OPENCART_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_OPENCART_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_OPENCART_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_OPENCART_CONFIG" "$MIRROR2_SS_INSTALL_OPENCART_CONFIG"
fi

## ss-install-opencart-core ##
ss_wget_fast -O "$TMP_SS_INSTALL_OPENCART_CORE" "$MIRROR_SS_INSTALL_OPENCART_CORE"
VALIDATE_TMP_SS_INSTALL_OPENCART_CORE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_OPENCART_CORE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_OPENCART_CORE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_OPENCART_CORE" "$MIRROR2_SS_INSTALL_OPENCART_CORE"
fi

## ss-install-php-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_PHP_CONFIG" "$MIRROR_SS_INSTALL_PHP_CONFIG"
VALIDATE_TMP_SS_INSTALL_PHP_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_PHP_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_PHP_CONFIG" "$MIRROR2_SS_INSTALL_PHP_CONFIG"
fi

## ss-install-php-packages ##
ss_wget_fast -O "$TMP_SS_INSTALL_PHP_PACKAGES" "$MIRROR_SS_INSTALL_PHP_PACKAGES"
VALIDATE_TMP_SS_INSTALL_PHP_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_PACKAGES}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_PHP_PACKAGES" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_PHP_PACKAGES" "$MIRROR2_SS_INSTALL_PHP_PACKAGES"
fi

## ss-install-prestashop-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_PRESTASHOP_CONFIG" "$MIRROR_SS_INSTALL_PRESTASHOP_CONFIG"
VALIDATE_TMP_SS_INSTALL_PRESTASHOP_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_PRESTASHOP_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_PRESTASHOP_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_PRESTASHOP_CONFIG" "$MIRROR2_SS_INSTALL_PRESTASHOP_CONFIG"
fi

## ss-install-prestashop-core ##
ss_wget_fast -O "$TMP_SS_INSTALL_PRESTASHOP_CORE" "$MIRROR_SS_INSTALL_PRESTASHOP_CORE"
VALIDATE_TMP_SS_INSTALL_PRESTASHOP_CORE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_PRESTASHOP_CORE}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_PRESTASHOP_CORE" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_PRESTASHOP_CORE" "$MIRROR2_SS_INSTALL_PRESTASHOP_CORE"
fi

## ss-install-rclone-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_RCLONE_CONFIG" "$MIRROR_SS_INSTALL_RCLONE_CONFIG"
VALIDATE_TMP_SS_INSTALL_RCLONE_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_RCLONE_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_RCLONE_CONFIG" "$MIRROR2_SS_INSTALL_RCLONE_CONFIG"
fi

## ss-install-rclone-packages ##
ss_wget_fast -O "$TMP_SS_INSTALL_RCLONE_PACKAGES" "$MIRROR_SS_INSTALL_RCLONE_PACKAGES"
VALIDATE_TMP_SS_INSTALL_RCLONE_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_PACKAGES}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_RCLONE_PACKAGES" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_RCLONE_PACKAGES" "$MIRROR2_SS_INSTALL_RCLONE_PACKAGES"
fi

## ss-install-redis-config ##
ss_wget_fast -O "$TMP_SS_INSTALL_REDIS_CONFIG" "$MIRROR_SS_INSTALL_REDIS_CONFIG"
VALIDATE_TMP_SS_INSTALL_REDIS_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_REDIS_CONFIG}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_REDIS_CONFIG" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_REDIS_CONFIG" "$MIRROR2_SS_INSTALL_REDIS_CONFIG"
fi

## ss-install-redis-packages ##
ss_wget_fast -O "$TMP_SS_INSTALL_REDIS_PACKAGES" "$MIRROR_SS_INSTALL_REDIS_PACKAGES"
VALIDATE_TMP_SS_INSTALL_REDIS_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_REDIS_PACKAGES}")
if [[ -z "$VALIDATE_TMP_SS_INSTALL_REDIS_PACKAGES" ]]; then
    ss_wget_slow -O "$TMP_SS_INSTALL_REDIS_PACKAGES" "$MIRROR2_SS_INSTALL_REDIS_PACKAGES"
fi

ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_BASH" "$MIRROR_SS_INSTALL_UBUNTU_BASH"
ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_CRONTAB" "$MIRROR_SS_INSTALL_UBUNTU_CRONTAB"
ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_KERNEL" "$MIRROR_SS_INSTALL_UBUNTU_KERNEL"
ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_SSH" "$MIRROR_SS_INSTALL_UBUNTU_SSH"
ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_SWAPFILE" "$MIRROR_SS_INSTALL_UBUNTU_SWAPFILE"
ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_USERS" "$MIRROR_SS_INSTALL_UBUNTU_USERS"
ss_wget_fast -O "$TMP_SS_INSTALL_UBUNTU_UTILS" "$MIRROR_SS_INSTALL_UBUNTU_UTILS"
ss_wget_fast -O "$TMP_SS_INSTALL_UFW_CONFIG" "$MIRROR_SS_INSTALL_UFW_CONFIG"
ss_wget_fast -O "$TMP_SS_INSTALL_UFW_PACKAGES" "$MIRROR_SS_INSTALL_UFW_PACKAGES"
ss_wget_fast -O "$TMP_SS_INSTALL_WORDPRESS_CLI" "$MIRROR_SS_INSTALL_WORDPRESS_CLI"
ss_wget_fast -O "$TMP_SS_INSTALL_WORDPRESS_CONFIG" "$MIRROR_SS_INSTALL_WORDPRESS_CONFIG"
ss_wget_fast -O "$TMP_SS_INSTALL_WORDPRESS_CORE" "$MIRROR_SS_INSTALL_WORDPRESS_CORE"
ss_wget_fast -O "$TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS" "$MIRROR_SS_INSTALL_WORDPRESS_MU_PLUGINS"
ss_wget_fast -O "$TMP_SS_MAINTENANCE_DISABLE" "$MIRROR_SS_MAINTENANCE_DISABLE"
ss_wget_fast -O "$TMP_SS_MAINTENANCE_ENABLE" "$MIRROR_SS_MAINTENANCE_ENABLE"
ss_wget_fast -O "$TMP_SS_MONITOR_RESOURCES" "$MIRROR_SS_MONITOR_RESOURCES"
ss_wget_fast -O "$TMP_SS_OPTIMIZE_DATABASE" "$MIRROR_SS_OPTIMIZE_DATABASE"
ss_wget_fast -O "$TMP_SS_OPTIMIZE_FILES" "$MIRROR_SS_OPTIMIZE_FILES"
ss_wget_fast -O "$TMP_SS_PERMS" "$MIRROR_SS_PERMS"
ss_wget_fast -O "$TMP_SS_PERMS_ADMINER" "$MIRROR_SS_PERMS_ADMINER"
ss_wget_fast -O "$TMP_SS_PERMS_CLAMAV" "$MIRROR_SS_PERMS_CLAMAV"
ss_wget_fast -O "$TMP_SS_PERMS_CRAFT_CONFIG" "$MIRROR_SS_PERMS_CRAFT_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_CRAFT_CORE" "$MIRROR_SS_PERMS_CRAFT_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_MAGENTO_CONFIG" "$MIRROR_SS_PERMS_MAGENTO_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_MAGENTO_CORE" "$MIRROR_SS_PERMS_MAGENTO_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_MEDIAWIKI_CONFIG" "$MIRROR_SS_PERMS_MEDIAWIKI_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_MEDIAWIKI_CORE" "$MIRROR_SS_PERMS_MEDIAWIKI_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_MOODLE_CONFIG" "$MIRROR_SS_PERMS_MOODLE_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_MOODLE_CORE" "$MIRROR_SS_PERMS_MOODLE_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_MYSQL_CONFIG" "$MIRROR_SS_PERMS_MYSQL_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_MYSQL_DATABASE" "$MIRROR_SS_PERMS_MYSQL_DATABASE"
ss_wget_fast -O "$TMP_SS_PERMS_MYSQL_PACKAGES" "$MIRROR_SS_PERMS_MYSQL_PACKAGES"
ss_wget_fast -O "$TMP_SS_PERMS_NGINX_CONFIG" "$MIRROR_SS_PERMS_NGINX_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_NGINX_PACKAGES" "$MIRROR_SS_PERMS_NGINX_PACKAGES"
ss_wget_fast -O "$TMP_SS_PERMS_NGINX_SSL" "$MIRROR_SS_PERMS_NGINX_SSL"
ss_wget_fast -O "$TMP_SS_PERMS_OPENCART_CONFIG" "$MIRROR_SS_PERMS_OPENCART_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_OPENCART_CORE" "$MIRROR_SS_PERMS_OPENCART_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_PHP_CONFIG" "$MIRROR_SS_PERMS_PHP_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_PHP_PACKAGES" "$MIRROR_SS_PERMS_PHP_PACKAGES"
ss_wget_fast -O "$TMP_SS_PERMS_PRESTASHOP_CONFIG" "$MIRROR_SS_PERMS_PRESTASHOP_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_PRESTASHOP_CORE" "$MIRROR_SS_PERMS_PRESTASHOP_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_RCLONE_CONFIG" "$MIRROR_SS_PERMS_RCLONE_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_RCLONE_PACKAGES" "$MIRROR_SS_PERMS_RCLONE_PACKAGES"
ss_wget_fast -O "$TMP_SS_PERMS_REDIS_CONFIG" "$MIRROR_SS_PERMS_REDIS_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_REDIS_PACKAGES" "$MIRROR_SS_PERMS_REDIS_PACKAGES"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_BASH" "$MIRROR_SS_PERMS_UBUNTU_BASH"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_CRONTAB" "$MIRROR_SS_PERMS_UBUNTU_CRONTAB"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_KERNEL" "$MIRROR_SS_PERMS_UBUNTU_KERNEL"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_SSH" "$MIRROR_SS_PERMS_UBUNTU_SSH"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_SWAPFILE" "$MIRROR_SS_PERMS_UBUNTU_SWAPFILE"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_USERS" "$MIRROR_SS_PERMS_UBUNTU_USERS"
ss_wget_fast -O "$TMP_SS_PERMS_UBUNTU_UTILS" "$MIRROR_SS_PERMS_UBUNTU_UTILS"
ss_wget_fast -O "$TMP_SS_PERMS_UFW_CONFIG" "$MIRROR_SS_PERMS_UFW_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_UFW_PACKAGES" "$MIRROR_SS_PERMS_UFW_PACKAGES"
ss_wget_fast -O "$TMP_SS_PERMS_WORDPRESS_CLI" "$MIRROR_SS_PERMS_WORDPRESS_CLI"
ss_wget_fast -O "$TMP_SS_PERMS_WORDPRESS_CONFIG" "$MIRROR_SS_PERMS_WORDPRESS_CONFIG"
ss_wget_fast -O "$TMP_SS_PERMS_WORDPRESS_CORE" "$MIRROR_SS_PERMS_WORDPRESS_CORE"
ss_wget_fast -O "$TMP_SS_PERMS_WORDPRESS_MU_PLUGINS" "$MIRROR_SS_PERMS_WORDPRESS_MU_PLUGINS"
ss_wget_fast -O "$TMP_SS_PURGE_NGINX" "$MIRROR_SS_PURGE_NGINX"
ss_wget_fast -O "$TMP_SS_PURGE_OPCACHE" "$MIRROR_SS_PURGE_OPCACHE"
ss_wget_fast -O "$TMP_SS_PURGE_REDIS" "$MIRROR_SS_PURGE_REDIS"
ss_wget_fast -O "$TMP_SS_PURGE_TRANSIENTS" "$MIRROR_SS_PURGE_TRANSIENTS"
ss_wget_fast -O "$TMP_SS_REBOOT_MACHINE" "$MIRROR_SS_REBOOT_MACHINE"
ss_wget_fast -O "$TMP_SS_REMOTE_BACKUP" "$MIRROR_SS_REMOTE_BACKUP"
ss_wget_fast -O "$TMP_SS_RESET_PASSWORD_SFTP" "$MIRROR_SS_RESET_PASSWORD_SFTP"
ss_wget_fast -O "$TMP_SS_RESTART_MYSQL" "$MIRROR_SS_RESTART_MYSQL"
ss_wget_fast -O "$TMP_SS_RESTART_NGINX" "$MIRROR_SS_RESTART_NGINX"
ss_wget_fast -O "$TMP_SS_RESTART_PHP" "$MIRROR_SS_RESTART_PHP"
ss_wget_fast -O "$TMP_SS_RESTART_REDIS" "$MIRROR_SS_RESTART_REDIS"
ss_wget_fast -O "$TMP_SS_RESTART_UFW" "$MIRROR_SS_RESTART_UFW"
ss_wget_fast -O "$TMP_SS_SCAN_MALWARE" "$MIRROR_SS_SCAN_MALWARE"
ss_wget_fast -O "$TMP_SS_STACK_OVERVIEW" "$MIRROR_SS_STACK_OVERVIEW"
ss_wget_fast -O "$TMP_SS_SYNC_STAGING" "$MIRROR_SS_SYNC_STAGING"
ss_wget_fast -O "$TMP_SS_UPDATE_CONFIG" "$MIRROR_SS_UPDATE_CONFIG"
ss_wget_fast -O "$TMP_SS_UPDATE_MODULES" "$MIRROR_SS_UPDATE_MODULES"
ss_wget_fast -O "$TMP_SS_WORKER" "$MIRROR_SS_WORKER"

####################################################################################################
#### F. SS-Check: Install Cron Jobs ################################################################
####################################################################################################

## here we copy all the downloaded core files to the proper folders where they remain ##
## the root crontab runs the core cron jobs which in turn run the bash scripts ##

## install ss core cron jobs ##
cp "$TMP_00_CRONTAB" "$PATH_00_CRONTAB"
cp "$TMP_01_CRON_OFTEN" "$PATH_01_CRON_OFTEN"
cp "$TMP_02_CRON_REGULAR" "$PATH_02_CRON_REGULAR"
cp "$TMP_03_CRON_QUARTER_HOURLY" "$PATH_03_CRON_QUARTER_HOURLY"
cp "$TMP_04_CRON_HALF_HOURLY" "$PATH_04_CRON_HALF_HOURLY"
cp "$TMP_05_CRON_HOURLY" "$PATH_05_CRON_HOURLY"
cp "$TMP_06_CRON_QUARTER_DAILY" "$PATH_06_CRON_QUARTER_DAILY"
cp "$TMP_07_CRON_HALF_DAILY" "$PATH_07_CRON_HALF_DAILY"
cp "$TMP_08_CRON_DAILY" "$PATH_08_CRON_DAILY"
cp "$TMP_09_CRON_HALF_WEEKLY" "$PATH_09_CRON_HALF_WEEKLY"
cp "$TMP_10_CRON_WEEKLY" "$PATH_10_CRON_WEEKLY"
cp "$TMP_11_CRON_HALF_MONTHLY" "$PATH_11_CRON_HALF_MONTHLY"
cp "$TMP_12_CRON_MONTHLY" "$PATH_12_CRON_MONTHLY"
cp "$TMP_13_CRON_SOMETIMES" "$PATH_13_CRON_SOMETIMES"

####################################################################################################
#### G. SS-Check: Install Bash Scripts (Except SS-Check) ###########################################
####################################################################################################

## install ss core bash scripts ##
cp "$TMP_SS_CLEAN_DATABASE" "$PATH_SS_CLEAN_DATABASE"
cp "$TMP_SS_CLEAN_FILES" "$PATH_SS_CLEAN_FILES"
cp "$TMP_SS_CONFIG_SAMPLE" "$PATH_SS_CONFIG_SAMPLE"
cp "$TMP_SS_DELETE_DATABASE" "$PATH_SS_DELETE_DATABASE"
cp "$TMP_SS_DELETE_FILES" "$PATH_SS_DELETE_FILES"
cp "$TMP_SS_DUMP_DATABASE" "$PATH_SS_DUMP_DATABASE"
cp "$TMP_SS_DUMP_FILES" "$PATH_SS_DUMP_FILES"
cp "$TMP_SS_EMPTY_LOGS" "$PATH_SS_EMPTY_LOGS"
cp "$TMP_SS_ENCRYPT_ACME" "$PATH_SS_ENCRYPT_ACME"
cp "$TMP_SS_ENCRYPT_CERTBOT" "$PATH_SS_ENCRYPT_CERTBOT"
cp "$TMP_SS_ENCRYPT_OPENSSL" "$PATH_SS_ENCRYPT_OPENSSL"
cp "$TMP_SS_FUNCTIONS" "$PATH_SS_FUNCTIONS"
cp "$TMP_SS_IMPORT_DATABASE" "$PATH_SS_IMPORT_DATABASE"
cp "$TMP_SS_IMPORT_FILES" "$PATH_SS_IMPORT_FILES"
cp "$TMP_SS_INSTALL" "$PATH_SS_INSTALL"
cp "$TMP_SS_INSTALL_ADMINER" "$PATH_SS_INSTALL_ADMINER"
cp "$TMP_SS_INSTALL_CLAMAV" "$PATH_SS_INSTALL_CLAMAV"
cp "$TMP_SS_INSTALL_CRAFT_CONFIG" "$PATH_SS_INSTALL_CRAFT_CONFIG"
cp "$TMP_SS_INSTALL_CRAFT_CORE" "$PATH_SS_INSTALL_CRAFT_CORE"
cp "$TMP_SS_INSTALL_MAGENTO_CONFIG" "$PATH_SS_INSTALL_MAGENTO_CONFIG"
cp "$TMP_SS_INSTALL_MAGENTO_CORE" "$PATH_SS_INSTALL_MAGENTO_CORE"
cp "$TMP_SS_INSTALL_MEDIAWIKI_CONFIG" "$PATH_SS_INSTALL_MEDIAWIKI_CONFIG"
cp "$TMP_SS_INSTALL_MEDIAWIKI_CORE" "$PATH_SS_INSTALL_MEDIAWIKI_CORE"
cp "$TMP_SS_INSTALL_MOODLE_CONFIG" "$PATH_SS_INSTALL_MOODLE_CONFIG"
cp "$TMP_SS_INSTALL_MOODLE_CORE" "$PATH_SS_INSTALL_MOODLE_CORE"
cp "$TMP_SS_INSTALL_MYSQL_CONFIG" "$PATH_SS_INSTALL_MYSQL_CONFIG"
cp "$TMP_SS_INSTALL_MYSQL_DATABASE" "$PATH_SS_INSTALL_MYSQL_DATABASE"
cp "$TMP_SS_INSTALL_MYSQL_PACKAGES" "$PATH_SS_INSTALL_MYSQL_PACKAGES"
cp "$TMP_SS_INSTALL_NGINX_CONFIG" "$PATH_SS_INSTALL_NGINX_CONFIG"
cp "$TMP_SS_INSTALL_NGINX_LETSENCRYPT" "$PATH_SS_INSTALL_NGINX_LETSENCRYPT"
cp "$TMP_SS_INSTALL_NGINX_OPENSSL" "$PATH_SS_INSTALL_NGINX_OPENSSL"
cp "$TMP_SS_INSTALL_NGINX_PACKAGES" "$PATH_SS_INSTALL_NGINX_PACKAGES"
cp "$TMP_SS_INSTALL_NGINX_SSL" "$PATH_SS_INSTALL_NGINX_SSL"
cp "$TMP_SS_INSTALL_OPENCART_CONFIG" "$PATH_SS_INSTALL_OPENCART_CONFIG"
cp "$TMP_SS_INSTALL_OPENCART_CORE" "$PATH_SS_INSTALL_OPENCART_CORE"
cp "$TMP_SS_INSTALL_PHP_CONFIG" "$PATH_SS_INSTALL_PHP_CONFIG"
cp "$TMP_SS_INSTALL_PHP_PACKAGES" "$PATH_SS_INSTALL_PHP_PACKAGES"
cp "$TMP_SS_INSTALL_PRESTASHOP_CONFIG" "$PATH_SS_INSTALL_PRESTASHOP_CONFIG"
cp "$TMP_SS_INSTALL_PRESTASHOP_CORE" "$PATH_SS_INSTALL_PRESTASHOP_CORE"
cp "$TMP_SS_INSTALL_RCLONE_CONFIG" "$PATH_SS_INSTALL_RCLONE_CONFIG"
cp "$TMP_SS_INSTALL_RCLONE_PACKAGES" "$PATH_SS_INSTALL_RCLONE_PACKAGES"
cp "$TMP_SS_INSTALL_REDIS_CONFIG" "$PATH_SS_INSTALL_REDIS_CONFIG"
cp "$TMP_SS_INSTALL_REDIS_PACKAGES" "$PATH_SS_INSTALL_REDIS_PACKAGES"
cp "$TMP_SS_INSTALL_UBUNTU_BASH" "$PATH_SS_INSTALL_UBUNTU_BASH"
cp "$TMP_SS_INSTALL_UBUNTU_CRONTAB" "$PATH_SS_INSTALL_UBUNTU_CRONTAB"
cp "$TMP_SS_INSTALL_UBUNTU_KERNEL" "$PATH_SS_INSTALL_UBUNTU_KERNEL"
cp "$TMP_SS_INSTALL_UBUNTU_SSH" "$PATH_SS_INSTALL_UBUNTU_SSH"
cp "$TMP_SS_INSTALL_UBUNTU_SWAPFILE" "$PATH_SS_INSTALL_UBUNTU_SWAPFILE"
cp "$TMP_SS_INSTALL_UBUNTU_USERS" "$PATH_SS_INSTALL_UBUNTU_USERS"
cp "$TMP_SS_INSTALL_UBUNTU_UTILS" "$PATH_SS_INSTALL_UBUNTU_UTILS"
cp "$TMP_SS_INSTALL_UFW_CONFIG" "$PATH_SS_INSTALL_UFW_CONFIG"
cp "$TMP_SS_INSTALL_UFW_PACKAGES" "$PATH_SS_INSTALL_UFW_PACKAGES"
cp "$TMP_SS_INSTALL_WORDPRESS_CLI" "$PATH_SS_INSTALL_WORDPRESS_CLI"
cp "$TMP_SS_INSTALL_WORDPRESS_CONFIG" "$PATH_SS_INSTALL_WORDPRESS_CONFIG"
cp "$TMP_SS_INSTALL_WORDPRESS_CORE" "$PATH_SS_INSTALL_WORDPRESS_CORE"
cp "$TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS" "$PATH_SS_INSTALL_WORDPRESS_MU_PLUGINS"
cp "$TMP_SS_MAINTENANCE_DISABLE" "$PATH_SS_MAINTENANCE_DISABLE"
cp "$TMP_SS_MAINTENANCE_ENABLE" "$PATH_SS_MAINTENANCE_ENABLE"
cp "$TMP_SS_MONITOR_RESOURCES" "$PATH_SS_MONITOR_RESOURCES"
cp "$TMP_SS_OPTIMIZE_DATABASE" "$PATH_SS_OPTIMIZE_DATABASE"
cp "$TMP_SS_OPTIMIZE_FILES" "$PATH_SS_OPTIMIZE_FILES"
cp "$TMP_SS_PERMS" "$PATH_SS_PERMS"
cp "$TMP_SS_PERMS_ADMINER" "$PATH_SS_PERMS_ADMINER"
cp "$TMP_SS_PERMS_CLAMAV" "$PATH_SS_PERMS_CLAMAV"
cp "$TMP_SS_PERMS_CRAFT_CONFIG" "$PATH_SS_PERMS_CRAFT_CONFIG"
cp "$TMP_SS_PERMS_CRAFT_CORE" "$PATH_SS_PERMS_CRAFT_CORE"
cp "$TMP_SS_PERMS_MAGENTO_CONFIG" "$PATH_SS_PERMS_MAGENTO_CONFIG"
cp "$TMP_SS_PERMS_MAGENTO_CORE" "$PATH_SS_PERMS_MAGENTO_CORE"
cp "$TMP_SS_PERMS_MEDIAWIKI_CONFIG" "$PATH_SS_PERMS_MEDIAWIKI_CONFIG"
cp "$TMP_SS_PERMS_MEDIAWIKI_CORE" "$PATH_SS_PERMS_MEDIAWIKI_CORE"
cp "$TMP_SS_PERMS_MOODLE_CONFIG" "$PATH_SS_PERMS_MOODLE_CONFIG"
cp "$TMP_SS_PERMS_MOODLE_CORE" "$PATH_SS_PERMS_MOODLE_CORE"
cp "$TMP_SS_PERMS_MYSQL_CONFIG" "$PATH_SS_PERMS_MYSQL_CONFIG"
cp "$TMP_SS_PERMS_MYSQL_DATABASE" "$PATH_SS_PERMS_MYSQL_DATABASE"
cp "$TMP_SS_PERMS_MYSQL_PACKAGES" "$PATH_SS_PERMS_MYSQL_PACKAGES"
cp "$TMP_SS_PERMS_NGINX_CONFIG" "$PATH_SS_PERMS_NGINX_CONFIG"
cp "$TMP_SS_PERMS_NGINX_PACKAGES" "$PATH_SS_PERMS_NGINX_PACKAGES"
cp "$TMP_SS_PERMS_NGINX_SSL" "$PATH_SS_PERMS_NGINX_SSL"
cp "$TMP_SS_PERMS_OPENCART_CONFIG" "$PATH_SS_PERMS_OPENCART_CONFIG"
cp "$TMP_SS_PERMS_OPENCART_CORE" "$PATH_SS_PERMS_OPENCART_CORE"
cp "$TMP_SS_PERMS_PHP_CONFIG" "$PATH_SS_PERMS_PHP_CONFIG"
cp "$TMP_SS_PERMS_PHP_PACKAGES" "$PATH_SS_PERMS_PHP_PACKAGES"
cp "$TMP_SS_PERMS_PRESTASHOP_CONFIG" "$PATH_SS_PERMS_PRESTASHOP_CONFIG"
cp "$TMP_SS_PERMS_PRESTASHOP_CORE" "$PATH_SS_PERMS_PRESTASHOP_CORE"
cp "$TMP_SS_PERMS_RCLONE_CONFIG" "$PATH_SS_PERMS_RCLONE_CONFIG"
cp "$TMP_SS_PERMS_RCLONE_PACKAGES" "$PATH_SS_PERMS_RCLONE_PACKAGES"
cp "$TMP_SS_PERMS_REDIS_CONFIG" "$PATH_SS_PERMS_REDIS_CONFIG"
cp "$TMP_SS_PERMS_REDIS_PACKAGES" "$PATH_SS_PERMS_REDIS_PACKAGES"
cp "$TMP_SS_PERMS_UBUNTU_BASH" "$PATH_SS_PERMS_UBUNTU_BASH"
cp "$TMP_SS_PERMS_UBUNTU_CRONTAB" "$PATH_SS_PERMS_UBUNTU_CRONTAB"
cp "$TMP_SS_PERMS_UBUNTU_KERNEL" "$PATH_SS_PERMS_UBUNTU_KERNEL"
cp "$TMP_SS_PERMS_UBUNTU_SSH" "$PATH_SS_PERMS_UBUNTU_SSH"
cp "$TMP_SS_PERMS_UBUNTU_SWAPFILE" "$PATH_SS_PERMS_UBUNTU_SWAPFILE"
cp "$TMP_SS_PERMS_UBUNTU_USERS" "$PATH_SS_PERMS_UBUNTU_USERS"
cp "$TMP_SS_PERMS_UBUNTU_UTILS" "$PATH_SS_PERMS_UBUNTU_UTILS"
cp "$TMP_SS_PERMS_UFW_CONFIG" "$PATH_SS_PERMS_UFW_CONFIG"
cp "$TMP_SS_PERMS_UFW_PACKAGES" "$PATH_SS_PERMS_UFW_PACKAGES"
cp "$TMP_SS_PERMS_WORDPRESS_CLI" "$PATH_SS_PERMS_WORDPRESS_CLI"
cp "$TMP_SS_PERMS_WORDPRESS_CONFIG" "$PATH_SS_PERMS_WORDPRESS_CONFIG"
cp "$TMP_SS_PERMS_WORDPRESS_CORE" "$PATH_SS_PERMS_WORDPRESS_CORE"
cp "$TMP_SS_PERMS_WORDPRESS_MU_PLUGINS" "$PATH_SS_PERMS_WORDPRESS_MU_PLUGINS"
cp "$TMP_SS_PURGE_NGINX" "$PATH_SS_PURGE_NGINX"
cp "$TMP_SS_PURGE_OPCACHE" "$PATH_SS_PURGE_OPCACHE"
cp "$TMP_SS_PURGE_REDIS" "$PATH_SS_PURGE_REDIS"
cp "$TMP_SS_PURGE_TRANSIENTS" "$PATH_SS_PURGE_TRANSIENTS"
cp "$TMP_SS_REBOOT_MACHINE" "$PATH_SS_REBOOT_MACHINE"
cp "$TMP_SS_REMOTE_BACKUP" "$PATH_SS_REMOTE_BACKUP"
cp "$TMP_SS_RESET_PASSWORD_SFTP" "$PATH_SS_RESET_PASSWORD_SFTP"
cp "$TMP_SS_RESTART_MYSQL" "$PATH_SS_RESTART_MYSQL"
cp "$TMP_SS_RESTART_NGINX" "$PATH_SS_RESTART_NGINX"
cp "$TMP_SS_RESTART_PHP" "$PATH_SS_RESTART_PHP"
cp "$TMP_SS_RESTART_REDIS" "$PATH_SS_RESTART_REDIS"
cp "$TMP_SS_RESTART_UFW" "$PATH_SS_RESTART_UFW"
cp "$TMP_SS_SCAN_MALWARE" "$PATH_SS_SCAN_MALWARE"
cp "$TMP_SS_STACK_OVERVIEW" "$PATH_SS_STACK_OVERVIEW"
cp "$TMP_SS_SYNC_STAGING" "$PATH_SS_SYNC_STAGING"
cp "$TMP_SS_UPDATE_CONFIG" "$PATH_SS_UPDATE_CONFIG"
cp "$TMP_SS_UPDATE_MODULES" "$PATH_SS_UPDATE_MODULES"
cp "$TMP_SS_WORKER" "$PATH_SS_WORKER"

####################################################################################################
#### H. SS-Check: Reset Permissions (SlickStack Core) ##############################################
####################################################################################################

## THIS SNIPPET DOES NOT RELY ON SS-CONFIG OR SS-FUNCTIONS ##

## SNIPPET: ss-check, ss-worker, ss core cron jobs
## UPDATED: 23SEP2021

## we hardcode this permissions reset snippet into all ss core scripts for redundancy ##
## this ensures permissions are regularly fixed without requiring dependencies ##

## make directories ##
mkdir /var/www
mkdir /var/www/auth
mkdir /var/www/backups
mkdir /var/www/backups/config
mkdir /var/www/backups/html
mkdir /var/www/backups/mysql
mkdir /var/www/backups/mysql/data
mkdir /var/www/cache
mkdir /var/www/cache/nginx
mkdir /var/www/cache/opcache
mkdir /var/www/cache/system
mkdir /var/www/certs
mkdir /var/www/certs/keys
mkdir /var/www/crons
mkdir /var/www/crons/custom
mkdir /var/www/html
mkdir /var/www/html/.well-known
mkdir /var/www/html/.well-known/acme-challenge
mkdir /var/www/logs
mkdir /var/www/meta
mkdir /var/www/meta/timestamps
mkdir /var/www/sites
touch /var/www/meta/.htpasswd

## if staging enabled
if [[ "$STAGING_SITE" != "false" ]]; then 
    mkdir /var/www/html/staging/.well-known
    mkdir /var/www/html/staging/.well-known/acme-challenge
    chown -R "${SFTP_USER}":www-data /var/www/html/staging/.well-known ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
    chown -R "${SFTP_USER}":www-data /var/www/html/staging/.well-known/acme-challenge ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
fi

## if dev enabled
if [[ "$DEV_SITE" != "false" ]]; then 
    mkdir /var/www/html/dev/.well-known
    mkdir /var/www/html/dev/.well-known/acme-challenge
    chown -R "${SFTP_USER}":www-data /var/www/html/dev/.well-known ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
    chown -R "${SFTP_USER}":www-data /var/www/html/dev/.well-known/acme-challenge ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
fi

## user/group ownership ##
chown root:root /var/www ## must be root:root
chown root:root /var/www/backups ## must be root:root
chown root:root /var/www/backups/config ## must be root:root
chown root:root /var/www/backups/mysql ## must be root:root
chown root:root /var/www/backups/mysql/data ## must be root:root
chown www-data:www-data /var/www/cache ## must be www-data:www-data
chown www-data:www-data /var/www/cache/nginx ## must be www-data:www-data
chown www-data:www-data /var/www/cache/opcache ## must be www-data:www-data (PHP-FPM pool)
chown root:root /var/www/cache/system ## must be root:root
chown root:root /var/www/certs ## must be root:root
chown root:root /var/www/certs/keys ## must be root:root
chown root:root /var/www/crons ## must be root:root
chown root:root /var/www/crons/*cron* ## must be root:root
chown root:root /var/www/crons/custom ## must be root:root
chown root:root /var/www/crons/custom/*cron* ## must be root:root
chown -R "${SFTP_USER}":www-data /var/www/html/.well-known ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
chown -R "${SFTP_USER}":www-data /var/www/html/.well-known/acme-challenge ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
chown www-data:www-data /var/www/logs ## must be www-data:www-data
chown www-data:www-data /var/www/meta ## must be www-data:www-data
chown www-data:www-data /var/www/meta/.htpasswd ## must be www-data:www-data
chown www-data:www-data /var/www/meta/ss-constants.php ## must be www-data:www-data
chown root:root /var/www/ss* ## must be root:root

## linux permissions ##
chmod 0755 /var/www ## must be 0755
chmod 0775 /var/www/cache ## 0755 should also work
chmod 0755 /var/www/cache/opcache ## 0755 should work
chmod 0755 /var/www/certs ## must be 0755
chmod 0700 /var/www/certs/keys ## must be 0700
chmod 0644 /var/www/certs/*.crt ## must be 0644
chmod 0644 /var/www/certs/*.pem ## must be 0644
chmod 0600 /var/www/certs/keys/*.key ## must be 0600
chmod 0600 /var/www/certs/keys/*.pem ## must be 0600
chmod 0755 /var/www/crons ## must be 0755
chmod 0700 /var/www/crons/*cron* ## 0700 means only root can execute
chmod 0755 /var/www/crons/custom ## must be 0755
chmod 0700 /var/www/crons/custom/*cron* ## 0700 means only root can execute
chmod 0755 /var/www/html/.well-known ## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
chmod 0775 /var/www/logs ## 6755 should also work
chmod 0775 /var/www/meta ## 6755 should also work
chmod 0644 /var/www/meta/.htpasswd ## 0644 seems enough
chmod 0440 /var/www/meta/ss-constants.php
chmod 0700 /var/www/ss* ## 0700 means only root can execute

####################################################################################################
#### I. SS-Check: Cleanup Temporary Files ##########################################################
####################################################################################################

## we briefly cleanup any leftover temporarily files that are relevant to this script ##
## this is performed before and after associated code runs to avoid conflicts ##

## delete tmp files ##
rm /tmp/ss*
rm /tmp/*cron*

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://linuxize.com/post/bash-functions/
## Ref: https://stackoverflow.com/questions/6366530/bash-syntax-error-unexpected-end-of-file
## Ref: https://gist.github.com/onnimonni/b49779ebc96216771a6be3de46449fa1
## Ref: https://www.putorius.net/linux-checksum-file-integrity-check.html
## Ref: https://unix.stackexchange.com/questions/254868/use-md5sum-to-verify-file-in-a-script

## SS_EOF
