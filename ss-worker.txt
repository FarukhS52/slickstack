#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-worker.txt ############################################
#### path: /var/www/ss-worker ######################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Performs various SlickStack maintenance tasks and downloads latest ss-check ##########
#### module version: Ubuntu 20.04 LTS ##############################################################
####################################################################################################

## include SlickStack configuration ##
source /var/www/ss-config

####################################################################################################
#### SlickStack: Critical Bash Functions (Aliases) For This Script To Work #########################
####################################################################################################

## the below functions are hardcoded into every SlickStack script to ensure reliability ##
## this also speeds up processing times by avoiding repeated inline commands ##

## variables ##
UBUNTU_VERSION=`lsb_release -rs`

## apt alias flags ##
function apt {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/apt --yes --quiet --option Dpkg::Options::=--force-confold --option Dpkg::Options::=--force-confdef "$@"
}

## add-apt-repository alias flags ##
function add-apt-repository {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/add-apt-repository --yes "$@"
}

## wget alias flags ##
function wget {
    command wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 "$@"
}

## mysql alias flags ##
# function mysql {
#    command mysql --user=root --host=localhost --protocol=socket --port=3306 --force "$@"
# }

## cp alias flags ##
function cp {
    command cp -R -f -d --no-preserve=mode,ownership "$@"
}

## rsync alias flags ##
function rsync {
    command rsync -aI --ignore-errors "$@"
}

## unzip alias flags ##
function unzip {
    command unzip -o "$@"
}

## mkdir alias flags ##
function mkdir {
    command mkdir -p "$@"
}

## rm alias flags ##
function rm {
    command rm -R -f "$@"
}

## ln alias flags ##
function ln {
    command ln -s -f "$@"
}

####################################################################################################
#### SS-Worker: Backup SS-Config File To The Parent Directory ######################################
####################################################################################################

## backup ss-config file ##
# WANTED: remove ss-config backups that are older than 48 hours
# WANTED: append date/time to ss-config backup files
cp /var/www/ss-config /var/ss-config.bak

####################################################################################################
#### SS-Worker: Delete Any Previous / Leftover (Conflicting) Temporary Files #######################
####################################################################################################

rm /tmp/ss*
rm /tmp/*cron*
rm /tmp/blacklist*

####################################################################################################
#### SS-Worker: Download Latest SS-Check Core Script (Improves SlickStack Redundancy) ##############
####################################################################################################

## download ss-check and redundant 1-cron-often script ##
wget -O /tmp/00-crontab http://mirrors.slickstack.io/00-crontab.txt
wget -O /tmp/01-cron-often http://mirrors.slickstack.io/01-cron-often.txt
wget -O /tmp/02-cron-regular http://mirrors.slickstack.io/02-cron-regular.txt
wget -O /tmp/ss-check http://mirrors.slickstack.io/ss-check.txt

## copy files to /var/www/ ##
cp /tmp/00-crontab /var/www/00-crontab
cp /tmp/01-cron-often /var/www/01-cron-often
cp /tmp/02-cron-regular /var/www/02-cron-regular
cp /tmp/ss-check /var/www/ss-check

####################################################################################################
#### SS-Worker: Reset SlickStack Core Files Permissions (Skips Web Root) ###########################
####################################################################################################

## ensure core directories exist (except html) ##
mkdir /var/www
mkdir /var/www/cache
mkdir /var/www/cache/fastcgi
mkdir /var/www/cache/opcache
mkdir /var/www/logs
mkdir /var/www/meta

## ensure misc files exist (makes things look pretty and suppresses error messages) ##
if [[ ! -f "/var/www/meta/wp.sql" ]]; then 
    touch "/var/www/meta/wp.sql"; 
fi

## chroot (SFTP) user directory ##
chown root:root /var ## must be root:root
chown root:root /var/www ## must be root:root
chmod 0755 /var/www ## must be 0755

## SlickStack core scripts ##
chown root:root /var/www/*cron* ## must be root:root
chown root:root /var/www/ss* ## must be root:root
chown www-data:www-data /var/www/wp.sql ## root:root should also work
chmod 6770 /var/www/*cron* ## 4700 should also work
chmod 6770 /var/www/ss* ## 4700 should also work
chmod 0700 /var/www/ss-config
chmod 6770 /var/www/meta/wp.sql

## its okay if the SFTP user accesses this stuff (but www-data access is the priority) ##
chown www-data:www-data /var/www/cache ## must be www-data:www-data
chown www-data:www-data /var/www/logs ## must be www-data:www-data
chown www-data:www-data /var/www/meta ## must be www-data:www-data
chmod 6775 /var/www/cache ## 6755 should also work
chmod 6775 /var/www/logs ## 6755 should also work
chmod 6775 /var/www/meta ## 6755 should also work

## ensure log files exist ##
if [ ! -f "/var/www/logs/clamav.log" ]; then touch "/var/www/logs/clamav.log"; fi
if [ ! -f "/var/www/logs/error.log" ]; then touch "/var/www/logs/error.log"; fi
if [ ! -f "/var/www/logs/mysql.log" ]; then touch "/var/www/logs/mysql.log"; fi
if [ ! -f "/var/www/logs/nginx.log" ]; then touch "/var/www/logs/nginx.log"; fi
if [ ! -f "/var/www/logs/redis.log" ]; then touch "/var/www/logs/redis.log"; fi

## individual log files ##
chown clamav:clamav /var/www/logs/clamav*.log*
chown www-data:www-data /var/www/logs/error*.log*
chown mysql:mysql /var/www/logs/mysql*.log*
chown www-data:www-data /var/www/logs/nginx*.log*
chown redis:redis /var/www/logs/redis*.log*

chmod 0755 /var/www/logs/*.log ## 6755 should also work

## ensure unix formatting (avoids syntax errors and otherwise) ##
dos2unix /var/www/*cron*
dos2unix /var/www/ss*

####################################################################################################
## SS-Worker: Download Latest Blacklist.txt File For Plugin Blacklist (MU Plugin) ##################
####################################################################################################

## here we retrieve the latest plugin blacklist file which might contain urgent changes ##
## maintaining a thoughtful blacklist vastly improves WP performance and security ##

## download latest blacklist (or custom blacklist) ##
if [[ -z "$PLUGIN_BLACKLIST_SOURCE" ]]; then 
    wget -O /tmp/blacklist.txt http://mirrors.slickstack.io/wordpress/blacklist.txt
else 
    wget -O /tmp/blacklist.txt "$PLUGIN_BLACKLIST_SOURCE"
fi

## copy file to wp-content directory ##
cp /tmp/blacklist.txt /var/www/html/wp-content/blacklist.txt

## reset permissions ##
chown www-data:wordpress /var/www/html/wp-content/blacklist.txt ## change to www-data:www-data when ss-perms fixed
chmod 0440 /var/www/html/wp-content/blacklist.txt

####################################################################################################
#### SS-Worker: Call WP-Cron Manually (Depends On SS-Config) #######################################
####################################################################################################

## run wp-cron here in future build if set in ss-config and disabled in wp-config ##

# WP_CRON_METHOD="auto"

#if [[ "$WP_CRON_METHOD" == "server" ]]; then 
#    php /var/www/html/wp-cron.php
#elif [[ "$WP_CRON_METHOD" == "auto" ]]; then 
#    php /var/www/html/wp-cron.php
#fi

####################################################################################################
#### SS-Worker: Calculate Largest Directories On Server + Update Meta Records ######################
####################################################################################################

# du -a /var/www/html | sort -n -r | head -n 15

####################################################################################################
#### SS-Worker: Sync Staging Site Data From Production (Live) Site #################################
####################################################################################################

## run ss-sync ##
# source /var/www/ss-sync

####################################################################################################
#### SS-Worker: Delete Any Previous / Leftover (Conflicting) Temporary Files #######################
####################################################################################################

rm -R -f /tmp/ss*
rm -R -f /tmp/*cron*
rm -R -f /tmp/blacklist*

####################################################################################################
#### SS-Worker: Various TEMP Tasks (e.g. Urgent Patches From The SlickStack Team, Etc) #############
####################################################################################################

# source /var/www/ss-muplugs
# source /var/www/ss-custom
# source /var/www/ss-install-wpconfig
# source /var/www/ss-sync


## FIXES OUTDATED SS STACKS TO ENSURE BETTER MYSQL ACCESS FOR CORE SCRIPTS ##

if [[ "${UBUNTU_VERSION}" = "20.04" ]]; then

## 1st ##
## create admin superuser (can be used with Adminer/phpMyAdmin) ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'::1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'::1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"

## grant admin superuser all privileges on all databases (localhost/IPv4/IPv6) ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'127.0.0.1' WITH GRANT OPTION;"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'::1' WITH GRANT OPTION;"

## install auth_socket plugin ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "INSTALL PLUGIN auth_socket SONAME 'auth_socket.so';"

## create sudo@localhost user via auth_socket ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS '${SUDO_USER}'@'localhost' IDENTIFIED WITH auth_socket BY '';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS '${SUDO_USER}'@'localhost' IDENTIFIED WITH auth_socket BY '';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO '${SUDO_USER}'@'localhost' WITH GRANT OPTION;"

## flush privileges ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=tcp --port=3306 --force -e "FLUSH PRIVILEGES;"

## 2nd ##
## create admin superuser (can be used with Adminer/phpMyAdmin) ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'::1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'::1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"

## grant admin superuser all privileges on all databases (localhost/IPv4/IPv6) ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'127.0.0.1' WITH GRANT OPTION;"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'::1' WITH GRANT OPTION;"

## install auth_socket plugin ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "INSTALL PLUGIN auth_socket SONAME 'auth_socket.so';"

## create sudo@localhost user via auth_socket ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "ALTER USER IF EXISTS '${SUDO_USER}'@'localhost' IDENTIFIED WITH auth_socket BY '';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "CREATE USER IF NOT EXISTS '${SUDO_USER}'@'localhost' IDENTIFIED WITH auth_socket BY '';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "GRANT ALL ON *.* TO '${SUDO_USER}'@'localhost' WITH GRANT OPTION;"

## flush privileges ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=127.0.0.1 --protocol=tcp --port=3306 --force -e "FLUSH PRIVILEGES;"


## 3rd ##
## create admin superuser (can be used with Adminer/phpMyAdmin) ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "ALTER USER IF EXISTS 'admin'@'::1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "CREATE USER IF NOT EXISTS 'admin'@'::1' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD_ROOT}';"

## grant admin superuser all privileges on all databases (localhost/IPv4/IPv6) ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'127.0.0.1' WITH GRANT OPTION;"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "GRANT ALL ON *.* TO 'admin'@'::1' WITH GRANT OPTION;"

## install auth_socket plugin ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "INSTALL PLUGIN auth_socket SONAME 'auth_socket.so';"

## create sudo@localhost user via auth_socket ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "ALTER USER IF EXISTS '${SUDO_USER}'@'localhost' IDENTIFIED WITH auth_socket BY '';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "CREATE USER IF NOT EXISTS '${SUDO_USER}'@'localhost' IDENTIFIED WITH auth_socket BY '';"
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "GRANT ALL ON *.* TO '${SUDO_USER}'@'localhost' WITH GRANT OPTION;"

## flush privileges ##
sudo mysql --user=root --password=$DB_PASSWORD_ROOT --host=localhost --protocol=socket --port=3306 --force -e "FLUSH PRIVILEGES;"

fi

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://linuxize.com/post/bash-functions/
## Ref: https://www.cyberciti.biz/faq/unix-linux-appleosx-bsd-shell-appending-date-to-filename/
## Ref: https://wordpress.stackexchange.com/questions/199725/triggering-cron-by-calling-wp-cron-php-on-the-command-line-rather-than-with-wget

## SS_EOF
