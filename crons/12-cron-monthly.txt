#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/crons/12-cron-monthly.txt ################################
#### path: /var/www/crons/12-cron-monthly ##########################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: SlickStack core cron job *monthly* (12/13) will run every 1 month ####################
#### module version: Ubuntu 20.04 LTS ##############################################################
#### sourced by: root crontab ######################################################################
#### bash aliases: ss cron monthly #################################################################
####################################################################################################

## NEVER MODIFY THE ROOT CRONTAB OR SS CORE CRON JOBS OR YOUR STACK WILL STOP WORKING ##
## INSTEAD ADJUST SS_INTERVAL SETTINGS IN SS-CONFIG OR EDIT CUSTOM CRON FILES ##

####################################################################################################
#### 12-Cron-Monthly: Validate (Restore) SS-Config #################################################
####################################################################################################

## SNIPPET: ss core cron jobs

## this attempts to restore missing or damaged ss-config using a recent intact backup ##
## however it is not fool-proof since there is no way to verify all settings ##

## snippet constants ##
VALIDATE_SS_CONFIG=$(grep 'SS_BUILD' /var/www/ss-config)
VALIDATE_TMP_SS_CONFIG=$(grep 'SS_BUILD' /tmp/ss-config)
SS_CONFIG_RECENT_BACKUPS=$(ls -1rta /var/www/meta/ss-config.bak* | tail -n1)
SS_CONFIG_BEST_MATCH=$(grep -il 'SS_BUILD' "$SS_CONFIG_RECENT_BACKUPS")

## validate ss-config ##
if [[ -z "$VALIDATE_SS_CONFIG" ]]; then
    rm /tmp/ss-config
    mv "$SS_CONFIG_BEST_MATCH" /tmp/ss-config
    if [[ -n "$VALIDATE_TMP_SS_CONFIG" ]]; then
        mv /tmp/ss-config /var/www/ss-config
        chown root:root /var/www/ss-config ## must be root:root
        chmod 0700 /var/www/ss-config ## 0700 means root can execute
    fi
    rm /tmp/ss-config
fi

## THIS SNIPPET DOES NOT RELY ON SS-CONFIG OR SS-FUNCTIONS




## include SlickStack configuration ##
source /var/www/ss-config

## include SlickStack functions ##
source /var/www/ss-functions

####################################################################################################
#### 12-Cron-Monthly: Validate SS-Check + SS-Worker ################################################
####################################################################################################

## SNIPPET: ss core cron jobs

## this snippet ensures ss-check and ss-worker (critical bash scripts) exist properly ##
## if either file is missing or damaged this snippet will reinstall them again ##

## validate ss-check ##
if [[ -z "$VALIDATE_SS_CHECK" ]]; then
    rm "$TMP_SS_CHECK"
    wget -O "$TMP_SS_CHECK" "$MIRROR_SS_CHECK"
    if [[ -n "$VALIDATE_TMP_SS_CHECK" ]]; then
        cp "$TMP_SS_CHECK" "$PATH_SS_CHECK"
        chown root:root "$PATH_SS_CHECK" ## must be root:root
        chmod 0700 "$PATH_SS_CHECK" ## 0700 means root can execute
    fi
    rm "$TMP_SS_CHECK"
fi

## validate ss-worker ##
if [[ -z "$VALIDATE_SS_WORKER" ]]; then
    rm "$TMP_SS_WORKER"
    wget -O "$TMP_SS_WORKER" "$MIRROR_SS_WORKER"
    if [[ -n "$VALIDATE_TMP_SS_WORKER" ]]; then
        cp "$TMP_SS_WORKER" "$PATH_SS_WORKER"
        chown root:root "$PATH_SS_WORKER" ## must be root:root
        chmod 0700 "$PATH_SS_WORKER" ## 0700 means root can execute
    fi
    rm "$TMP_SS_WORKER"
fi

####################################################################################################
#### 12-Cron-Monthly: Run Custom Tasks #############################################################
####################################################################################################

## this will run custom shell commands that you can save in a reserved filename below ##
## carefully consider server resources and best practices before customizing ##

## run custom cron jobs ##
source "$PATH_CRON_MONTHLY_CUSTOM"

####################################################################################################
#### 12-Cron-Monthly: Run Scheduled Tasks ##########################################################
####################################################################################################

## the below tasks will be called if configured to run at this interval in ss-config ##
## certain tasks are automatically called if the relevant interval is missing ##

## run ss-install-wordpress-core if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_WORDPRESS_CORE" == "monthly" || -z "$SS_INTERVAL_INSTALL_WORDPRESS_CORE" ]]; then 
    source /var/www/ss-install-wordpress-core
fi

## run ss-install-wordpress-config if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_WORDPRESS_CONFIG" == "monthly" ]]; then 
    source /var/www/ss-install-wordpress-config
fi

## run ss-optimize-database if set to monthly ##
if [[ "$SS_INTERVAL_OPTIMIZE_DATABASE" == "monthly" ]]; then 
    source /var/www/ss-optimize-database
fi

## run ss-install-php if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_PHP" == "monthly" ]]; then 
    source /var/www/ss-install-php
fi

## run ss-install-redis if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_REDIS" == "monthly" ]]; then 
    source /var/www/ss-install-redis
fi

## run ss-install-mysql if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_MYSQL" == "monthly" ]]; then 
    source /var/www/ss-install-mysql
fi

## run ss-install-nginx if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_NGINX" == "monthly" ]]; then 
    source /var/www/ss-install-nginx
fi

## run ss-encrypt if set to monthly ##
if [[ "$SS_INTERVAL_ENCRYPT" == "monthly" ]]; then 
    source /var/www/ss-encrypt
fi

## run ss-install-adminer if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_ADMINER" == "monthly" ]]; then 
    source /var/www/ss-install-adminer
fi

## run ss-purge if set to monthly ##
if [[ "$SS_INTERVAL_PURGE" == "monthly" ]]; then 
    source /var/www/ss-purge
fi

## run ss-install-ubuntu-bash if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_UBUNTU_BASH" == "monthly" ]]; then 
    source /var/www/ss-install-ubuntu-bash
fi

## run ss-install-ubuntu-users if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_UBUNTU_USERS" == "monthly" ]]; then 
    source /var/www/ss-install-ubuntu-users
fi

## run ss-install-ubuntu-ssh if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_UBUNTU_SSH" == "monthly" ]]; then 
    source /var/www/ss-install-ubuntu-ssh
fi

## run ss-install-ubuntu-kernel if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_UBUNTU_KERNEL" == "monthly" ]]; then 
    source /var/www/ss-install-ubuntu-kernel
fi

## run ss-install-ubuntu-crontab if set to monthly ##
if [[ "$SS_INTERVAL_INSTALL_UBUNTU_CRONTAB" == "monthly" ]]; then 
    source /var/www/ss-install-ubuntu-crontab
fi

## run ss-update if set to monthly ##
if [[ "$SS_INTERVAL_UPDATE" == "monthly" ]]; then 
    source /var/www/ss-update
fi

## run ss-reboot if set to monthly or if not defined (default) ##
if [[ "$SS_INTERVAL_REBOOT" == "monthly" || -z "$SS_INTERVAL_REBOOT" ]]; then 
    source /var/www/ss-reboot
fi

####################################################################################################
#### 12-Cron-Monthly: Reset Permissions (SS Core Bash Scripts + SS Core Cron Jobs) #################
####################################################################################################

## SNIPPET: ss-check, ss-worker, ss core cron jobs

## we hardcode this permissions reset snippet into all ss core scripts for redundancy ##
## chmod 0700 means only the root/sudo users can execute the ss core scripts ##

## reset permissions ##
chown root:root /var/www/ss* ## must be root:root
chown root:root /var/www/crons/*cron* ## must be root:root
chmod 0700 /var/www/ss* ## 0700 means root can execute
chmod 0700 /var/www/crons/*cron* ## 0700 means root can execute

####################################################################################################
#### 12-Cron-Monthly: Delete Lock File #############################################################
####################################################################################################

## here we delete the lock file associated with this cron job to clear the cron queue ##
## this is technically not necessary but we do it anyway for extra security ##

## delete lock ##
rm "$LOCK_12_CRON_MONTHLY"

####################################################################################################
#### 12-Cron-Monthly: Touch Timestamp File (End Script) ############################################
####################################################################################################

## this is a dummy timestamp file that will remember the last time this script was run ##
## it can be useful for developer reference and is sometimes used by SlickStack ##

## script timestamp ##
touch "$TIMESTAMP_12_CRON_MONTHLY"

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://bash.cyberciti.biz/guide/Setting_up_permissions_on_a_script
## Ref: https://stackoverflow.com/questions/22861580/bash-script-check-if-a-file-contains-a-specific-line
## Ref: https://stackoverflow.com/questions/4749330/how-to-test-if-string-exists-in-file-with-bash/14201583
## Ref: https://stackoverflow.com/questions/11287861/how-to-check-if-a-file-contains-a-specific-string-using-bash
## Ref: https://stackoverflow.com/questions/4749330/how-to-test-if-string-exists-in-file-with-bash-
## Ref: https://stackoverflow.com/questions/42377739/while-file-doesnt-contain-string-bash

## SS_EOF
