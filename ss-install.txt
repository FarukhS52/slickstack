#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-install.txt ###########################################
#### path: /var/www/ss-install #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls the entire SlickStack LEMP server and all modules, etc (idempotent) #######
#### module version: Ubuntu 20.04 LTS ##############################################################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED (AND CURRENT BUILD) BEFORE RUNNING SS-INSTALL ##
## ENSURE SS-CONFIG OPTIONS REMAIN CURRENT BY RUNNING SS-UPDATE OCCASIONALLY ##

####################################################################################################
#### SlickStack: Critical Variables For This Script To Work ########################################
####################################################################################################

## something like environment variables but not exactly that are placed in core scripts ##
## we keep these variables together for easy reference and better organization ##

## include SlickStack configuration (if exists) ##
# SS_CONFIG=/var/www/ss-config
# test -f $SS_CONFIG && source $SS_CONFIG
source /var/www/ss-config

## hardcoded variables ##
UBUNTU_VERSION=`lsb_release -rs`
DISK_FREE=`df -k --output=avail "$PWD" | tail -n1`

####################################################################################################
#### SlickStack: Critical Bash Functions (Aliases) For This Script To Work #########################
####################################################################################################

## the below functions are hardcoded into every SlickStack script to ensure reliability ##
## this also speeds up processing times by avoiding repeated inline commands ##

## add-apt-repository alias flags ##
function add-apt-repository {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/add-apt-repository --yes "$@"
}

## apt alias flags ##
function apt {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/apt --yes --quiet --option Dpkg::Options::=--force-confold --option Dpkg::Options::=--force-confdef "$@"
}

## cp alias flags ##
function cp {
    command cp -R -f -d --no-preserve=mode,ownership "$@"
}

## ln alias flags ##
function ln {
    command ln -s -f "$@"
}

## mkdir alias flags ##
function mkdir {
    command mkdir -p "$@"
}

## mysql alias flags ##
function mysql {
    command mysql --user=root --host=localhost --protocol=socket --port=3306 --force "$@"
}

## mysqldump alias flags ##
# function mysqldump {
    # /usr/bin/mysqldump
#     command mysqldump --user=$DB_USER --password=$DB_PASSWORD --host=$DB_HOST --protocol=tcp --port=3306 --no-tablespaces --single-transaction --skip-lock-tables --dump-date --force "$@"
# }

## rm alias flags ##
function rm {
    command rm -R -f "$@"
}

## rsync alias flags ##
function rsync {
    command rsync -aI --ignore-errors "$@"
}

## unzip alias flags ##
function unzip {
    command unzip -o "$@"
}

## wget alias flags ##
function wget {
    command wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 "$@"
}

####################################################################################################
#### SlickStack: Pretty Colors + Styles For The Shell ##############################################
####################################################################################################

## these color variables help maintain cleaner and prettier Bash scripts in SlickStack ##
## we substitute e.g. ${PINK} within any echo line then use ${RESET} to revert ##

## pretty colors ##
NOCOLOR='\033[0m'
DARKRED='\033[0;31m'
LIGHTRED='\033[1;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
DARKGREEN='\033[0;32m'
LIGHTGREEN='\033[1;32m'
DARKCYAN='\033[0;36m'
LIGHTCYAN='\033[1;36m'
DARKBLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
DARKPURPLE='\033[0;35m'
LIGHTPURPLE='\033[1;35m'

PINK='\033[1;35m'

DARKGRAY='\033[1;30m'
LIGHTGRAY='\033[0;37m'
WHITE='\033[1;37m'

BGBLACK=$(tput setab 0) # black
BGRED=$(tput setab 1) # red
BGGREEN=$(tput setab 2) # green
BGYELLOW=$(tput setab 3) # yellow
BGBLUE=$(tput setab 4) # blue
BGPINK=$(tput setab 5) # magenta (pink)
BGCYAN=$(tput setab 6) # cyan
BGWHITE=$(tput setab 7) # white

## pretty styles ##
BOLD=$(tput bold) # bold (strong)
DIM=$(tput dim) # dim (half-bright)
NORMAL=$(tput sgr0) # reset all styles (normal)
RESET=$(tput sgr0) # reset all styles (normal)
BLINK=$(tput blink) # blink
UNDERLINE=$(tput smul) # underline
ENDUNDER=$(tput rmul) # end underline
REVERSE=$(tput rev) # reverse
STANDOUT=$(tput smso) # standout (highlight)
ENDSTAND=$(tput rmso) # end standout

####################################################################################################
#### SS-Install: Check OS Compability + Disk Space + Verify SS-Config Build ########################
####################################################################################################

## never run ss-install unless the build version below matches current ss-config version ##
## in case of emergencies the SlickStack team might purposefully mismatch builds ##

## verify optimal Ubuntu version ##
if [[ "${UBUNTU_VERSION}" != "20.04" ]]; then
    echo -e "${YELLOW}SS-INSTALL: SlickStack is designed for ${BOLD}Ubuntu 20.04${NORMAL}, but this server is running ${BOLD}Ubuntu ${UBUNTU_VERSION}${NORMAL}.${NOCOLOR}" >&2
    exit 1
fi

## ensure at least 5GB free disk space remains ##
if [[ $DISK_FREE -lt 5242880 ]]; then # 10G = 10485760 / 5GB = 5242880
    echo -e "${YELLOW}SS-INSTALL: It looks like your server has less than 5GB free space available, please upgrade your server and then run ${BOLD}ss-install${NORMAL} again.${NOCOLOR}" >&2
    exit 1
fi

## ensure ss-config build matches ss-install build (if exists) ##
if [[ -f "/var/www/ss-config" ]] && [[ "$SS_BUILD" != "OCT2020C" ]]; then 
    echo -e "${YELLOW}SS-INSTALL: It appears your ${BOLD}ss-config${NORMAL} file is outdated. Please run ${BOLD}ss-update${NORMAL} and then run ${BOLD}ss-install${NORMAL} again.${NOCOLOR}" >&2
    exit 1
fi

## backup database before proceeding (if ss-config exists) ##
# if [[ -f "/var/www/ss-config" ]]; then
# source /var/www/ss-dump
# fi

####################################################################################################
#### SS-Install: Interactive Bash Setup Wizard (SS-Config) #########################################
####################################################################################################

## VNC Consoles = 80 characters wide? 75 better

## this basic wizard will allow you to interactively setup your ss-config file options ##
## advanced users can setup ss-config before running ss-install to avoid this ##

## f*ck containers (first things first) ##
echo -e ""
echo -e ""
echo -e "${LIGHTPURPLE} _____________________________ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}< screw containers! excelsior > ${NOCOLOR}"
echo -e "${LIGHTPURPLE} ----------------------------- ${NOCOLOR}"
echo -e "${LIGHTPURPLE}        \   ^__^ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}         \  (oo)\_______ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}            (__)\       )\/\ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}                ||----w | ${NOCOLOR}"
echo -e "${LIGHTPURPLE}                ||     || ${NOCOLOR}"
echo -e ""
echo -e ""

## rainbow colors test ##
RAINBOW="${DARKRED}darkred ${LIGHTRED}lightred ${ORANGE}orange ${YELLOW}yellow ${DARKGREEN}darkgreen ${LIGHTGREEN}lightgreen ${DARKCYAN}darkcyan ${LIGHTCYAN}lightcyan ${DARKBLUE}darkblue ${LIGHTBLUE}lightblue ${DARKPURPLE}darkpurple ${LIGHTPURPLE}lightpurple ${DARKGRAY}darkgray ${LIGHTGRAY}lightgray ${WHITE}white${NOCOLOR}"
# echo -e "$RAINBOW"

if [[ ! -f "/var/www/ss-config" ]]; then
    ## tell the user we will attempt the wizard (give users 10 seconds to exit if they prefer manual setup) ##
    
    echo -e "${YELLOW}Welcome to SlickStack! It appears that your ss-config file has not been ${NOCOLOR}"
    echo -e "${YELLOW}setup yet. Please use the wizard to configure required options, or hit ${NOCOLOR}"
  
    wait_time=30 # seconds
    temp_cnt=${wait_time}
    while [[ ${temp_cnt} -gt 0 ]];
    do
        # echo -e "${YELLOW}to configure required options (or hit Ctrl+C to cancel wizard and configure manually): ${NOCOLOR}" ${temp_cnt}
        printf "${YELLOW}\rCtrl+C to cancel wizard and configure ss-config manually: ${LIGHTGREEN}%2d ${NOCOLOR}" ${temp_cnt}
        sleep 1
        ((temp_cnt--))
    done
    echo -e ""
    
    echo -e ""
    echo -e ""
    echo -e "${LIGHTPURPLE}###########################################################################${NOCOLOR}"
    echo -e "${LIGHTPURPLE}#### SlickStack Interactive Setup Wizard (SS-Config) ######################${NOCOLOR}"
    echo -e "${LIGHTPURPLE}###########################################################################${NOCOLOR}"
    echo -e ""

    ## ensure SlickStack root directory exists (in case running ss-install from other directories) ##
    mkdir /var/www
    ## get latest ss-config boilerplate ##
    rm /tmp/ss-config
    rm /tmp/config
    # wget -O /tmp/ss-config http://mirrors.slickstack.io/ss-config-sample.txt
    wget -qO /tmp/config http://mirrors.slickstack.io/ss-config-sample.txt
    
    ## replace all password fields with random strings ##
    sed -i "s/@ROOT_PASSWORD/$(openssl rand -hex 12)/g" /tmp/config
    # sed -i "s/@SUDO_PASSWORD/$(openssl rand -hex 12)/g" /tmp/config
    # sed -i "s/@SFTP_PASSWORD/$(openssl rand -hex 12)/g" /tmp/config
    # sed -i "s/@DB_PASSWORD_USER/$(openssl rand -hex 12)/g" /tmp/config
    sed -i "s/@DB_PASSWORD_ROOT/$(openssl rand -hex 12)/g" /tmp/config
    
    ## PROMPT: choose sudo username (default = batman) ##
    # read -p 'Choose sudo username (e.g. batman): ' ss_var_sudo_user
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose sudo username (e.g. batman): "$NORMAL)" -e -i 'batman' ss_var_sudo_user || ss_var_sudo_user=batman
    # read -p 'Choose sudo username (e.g. batman): ' -e -i 'batman' ss_var_sudo_user
    sed -i "s/@SUDO_USER/$ss_var_sudo_user/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose sudo password (default = random) ##
    sudopass_random=$(openssl rand -hex 12)
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose sudo password (should be memorable): "$NORMAL)" -e -i ${sudopass_random} ss_var_sudo_password || ss_var_sudo_password=${sudopass_random}
    # sed -i "s/@SUDO_PASSWORD/$(openssl rand -hex 12)/g" /tmp/config
    sed -i "s/@SUDO_PASSWORD/$ss_var_sudo_password/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose SSH port number (default = 6969) ##
    # read -p 'Choose SSH port (6969): ' ss_var_ssh_port
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose SSH port (6969): "$NORMAL)" -e -i '6969' ss_var_ssh_port || ss_var_ssh_port=6969
    # read -p 'Choose SSH port (6969): ' -e -i '6969' ss_var_ssh_port
    sed -i "s/@SSH_PORT/$ss_var_ssh_port/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: enable SSH keys (default = false) ##
    # read -p 'Enable SSH keys (false/true): ' ss_var_ssh_keys
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Enable SSH keys (false): "$NORMAL)" -e -i 'false' ss_var_ssh_keys || ss_var_ssh_keys=false
    # read -p 'Enable SSH keys (false): ' -e -i 'false' ss_var_ssh_keys
    sed -i "s/@SSH_KEYS/$ss_var_ssh_keys/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose SFTP username (default = robin) ##
    # read -p 'Choose SFTP username (e.g. robin): ' ss_var_sftp_user
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose SFTP username (e.g. robin): "$NORMAL)" -e -i 'robin' ss_var_sftp_user || ss_var_sftp_user=robin
    # read -p 'Choose SFTP username (e.g. robin): ' -e -i 'robin' ss_var_sftp_user
    sed -i "s/@SFTP_USER/$ss_var_sftp_user/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose SFTP password (default = random) ##
    sftp_pass_random=$(openssl rand -hex 12)
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose SFTP password (should be memorable): "$NORMAL)" -e -i ${sftp_pass_random} ss_var_sftp_password || ss_var_sftp_password=${sftp_pass_random}
    # sed -i "s/@SUDO_PASSWORD/$(openssl rand -hex 12)/g" /tmp/config
    sed -i "s/@SFTP_PASSWORD/$ss_var_sftp_password/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose database name (default = wordpress) ##
    # read -p 'Choose database name (wordpress): ' ss_var_db_name
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose database name (wordpress): "$NORMAL)" -e -i 'wordpress' ss_var_db_name || ss_var_db_name=wordpress
    # read -p 'Choose database name (wordpress): ' -e -i 'wordpress' ss_var_db_name
    sed -i "s/@DB_NAME/$ss_var_db_name/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose database user (default = robin) ##
    # read -p 'Choose database user (e.g. robin): ' ss_var_db_user
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose database user (e.g. robin): "$NORMAL)" -e -i 'robin' ss_var_db_user || ss_var_db_user=robin
    # read -p 'Choose database user (e.g. robin): ' -e -i 'robin' ss_var_db_user
    sed -i "s/@DB_USER/$ss_var_db_user/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose database user password (default = random) ##
    db_pass_random=$(openssl rand -hex 12)
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose database user password: "$NORMAL)" -e -i ${db_pass_random} ss_var_db_password || ss_var_db_password=${db_pass_random}
    # sed -i "s/@SUDO_PASSWORD/$(openssl rand -hex 12)/g" /tmp/config
    sed -i "s/@DB_PASSWORD_USER/$ss_var_db_password/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose database host (default = 127.0.0.1) ##
    # read -p 'Choose database host (127.0.0.1): ' ss_var_db_host
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose database host (127.0.0.1): "$NORMAL)" -e -i '127.0.0.1' ss_var_db_host || ss_var_db_host=127.0.0.1
    # read -p 'Choose database host (127.0.0.1): ' -e -i '127.0.0.1' ss_var_db_host
    sed -i "s/@DB_HOST/$ss_var_db_host/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose database prefix (default = wp_) ##
    # read -p 'Choose database prefix (wp_): ' ss_var_db_prefix
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose database prefix (wp_): "$NORMAL)" -e -i 'wp_' ss_var_db_prefix || ss_var_db_prefix=wp_
    # read -p 'Choose database prefix (wp_): ' -e -i 'wp_' ss_var_db_prefix
    sed -i "s/@DB_PREFIX/$ss_var_db_prefix/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose database charset (otherwise utf8mb4) ##
    # read -p 'Choose database charset (utf8mb4): ' ss_var_db_charset
    
    ## PROMPT: choose database collate (otherwise blank) ##
    # read -p 'Choose database collate (*empty*): ' ss_var_db_collate
    
    ## PROMPT: choose site TLD (otherwise example.com) ##
    # read -p 'Choose site TLD domain (e.g. example.com without prefix or subdomain): ' ss_var_site_tld
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose site TLD domain (e.g. example.com without prefix or subdomain): "$NORMAL)" -e -i 'example.com' ss_var_site_tld || ss_var_site_tld=example.com
    # read -p 'Choose site TLD domain (e.g. example.com without prefix or subdomain): ' -e -i 'example.com' ss_var_site_tld
    sed -i "s/@SITE_TLD/$ss_var_site_tld/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose site domain (otherwise www.example.com) ##
    # read -p 'Choose site live domain (e.g. www.example.com with desired prefix or subdomain, no subdirectories allowed): ' ss_var_site_domain
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose site live domain (e.g. www.example.com with optional subdomain, no subdirectories): "$NORMAL)" -e -i 'www.example.com' ss_var_site_domain || ss_var_site_domain=www.example.com
    # read -p 'Choose site live domain (e.g. www.example.com with desired prefix or subdomain, no subdirectories allowed): ' -e -i 'www.example.com' ss_var_site_domain
    sed -i "s/@SITE_DOMAIN/$ss_var_site_domain/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: enable noindex server (default = false) ##
    # read -p 'Enable site noindexing (false): ' ss_var_site_noindex
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Enable site noindexing (false): "$NORMAL)" -e -i 'false' ss_var_site_noindex || ss_var_site_noindex=false
    # read -p 'Enable site noindexing (false): ' -e -i 'false' ss_var_site_noindex
    sed -i "s/@SITE_NOINDEX/$ss_var_site_noindex/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## Multisite not supported yet ##
    ## PROMPT: enable WP multisite (otherwise disabled) ##
    # read -p 'Enable WP multisite (no): ' ss_var_wp_multisite
    
    ## PROMPT: disable WP multisite subdomains (otherwise enabled) ##
    # read -p 'Enable WP multisite subdomains (yes): ' ss_var_wp_multisite_subdomains
    
    ## PROMPT: enable WP multisite domain mapping (otherwise disabled) ##
    # read -p 'Enable WP multisite domain mapping (no): ' ss_var_wp_multisite_domain_mapping
    
    ## PROMPT: choose Cloudflare API key (otherwise 123456789) ##
    # read -p 'Choose Cloudflare API key (e.g. 123456789): ' ss_var_cloudflare_api_key
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose Cloudflare API key (e.g. 123456789): "$NORMAL)" -e -i '123456789' ss_var_cloudflare_api_key || ss_var_cloudflare_api_key=123456789
    # read -p 'Choose Cloudflare API key (e.g. 123456789): ' -e -i '123456789' ss_var_cloudflare_api_key
    sed -i "s/@CLOUDFLARE_API_KEY/$ss_var_cloudflare_api_key/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: choose Cloudflare API email (otherwise user@example.com) ##
    # read -p 'Choose Cloudflare API email (e.g. user@example.com): ' ss_var_cloudflare_api_email
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Choose Cloudflare API email (e.g. user@example.com): "$NORMAL)" -e -i 'user@example.com' ss_var_cloudflare_api_email || ss_var_cloudflare_api_email=user@example.com
    # read -p 'Choose Cloudflare API email (e.g. user@example.com): ' -e -i 'user@example.com' ss_var_cloudflare_api_email
    sed -i "s/@CLOUDFLARE_API_EMAIL/$ss_var_cloudflare_api_email/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## PROMPT: enable native staging site features ##
    # read -p 'Enable native staging site? (true/false): ' ss_var_staging_site
    read -t 300 -p "$(echo -e $LIGHTPURPLE"Enable native staging site? (true): "$NORMAL)" -e -i 'true' ss_var_staging_site || ss_var_staging_site=true
    # read -p 'Enable native staging site? (true): ' -e -i 'true' ss_var_staging_site
    sed -i "s/@STAGING_SITE/$ss_var_staging_site/g" /tmp/config
    
    ## new line ##
    printf "\n"
    
    ## copy files to their destinations ##
    # cp /tmp/ss-config /var/www/ss-config
    cp /tmp/config /var/www/ss-config
    
    # echo -e "\e[36mThis wizard is under construction... your ss-config is not fully setup yet, please finalize ss-config and then run ss-install again...\e[0m"
    # exit 1
else
    echo -e "${YELLOW}SlickStack loves you! It looks like your ss-config file exists already, ${NOCOLOR}"
    echo -e "${YELLOW}so we will proceed with ss-install using existing settings... ${NOCOLOR}"
    sleep 10s
fi

####################################################################################################
#### SS-Install: Download Latest SlickStack Core Scripts + Cron Jobs (Via SS-Check) ################
####################################################################################################

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-INSTALL: Retrieving latest SlickStack files and copying them to local server...${NOCOLOR}"

## download latest versions ##
wget -O /tmp/ss-check http://mirrors.slickstack.io/ss-check.txt

## copy files to their destinations ##
cp /tmp/ss-check /var/www/ss-check

## reset permissions ##
chown root:root /var/www/ss-check
chmod 6770 /var/www/ss-check

## run scripts ##
source /var/www/ss-check

####################################################################################################
#### SS-Install: Configure Ubuntu Root + Users + Sudo Permissions + SSH/SFTP #######################
####################################################################################################

## first we need to setup all users and passwords for Ubuntu and set sudo permissions ##
## this process will also set the default SSH port and disable root SSH logins ##

## run ss-install-ubuntu-users ##
source /var/www/ss-install-ubuntu-users

## run ss-install-ubuntu-ssh ##
source /var/www/ss-install-ubuntu-ssh

####################################################################################################
#### SS-Install: Install SlickStack (Ubuntu) Root Crontab File #####################################
####################################################################################################

## cron should be installed by default on Ubuntu but this script will install otherwise ##
## it will also install root crontab and core cron jobs from SlickStack mirrors ##

## run ss-install-cron ##
source /var/www/ss-install-ubuntu-crontab

####################################################################################################
#### SS-Install: Update Apt Cache And Upgrade Packages #############################################
####################################################################################################

## here we run updates to ensure that the Ubuntu apt cache and all packages are current ##
## ss-update will ensure that confold is set to default to avoid overwriting ##

## run ss-update ##
source /var/www/ss-update

####################################################################################################
#### SlickStack: Install Various Modules Via Default Ubuntu Packages ###############################
####################################################################################################

## run ss-install-misc ##
source /var/www/ss-install-misc

####################################################################################################
#### SS-Install: Install PHP-FPM 7.4.x + Required PHP Extensions ###################################
####################################################################################################

## here we install the PHP-FPM module which includes OPcache for better performance ##
## FastCGI is configured to interface with Nginx using TCP (127.0.0.1:9000) ##

## run ss-install-php ##
source /var/www/ss-install-php

####################################################################################################
#### SS-Install: Install SlickStack Bash Aliases [ss] + WP-CLI Bash Aliases [wp] ###################
####################################################################################################

## SlickStack aims to emphasize traditional bash scripts but we still support aliases ##
## in most cases using aliases are not necessary but this will evolve over time ##

## run ss-install-ubuntu-aliases ##
source /var/www/ss-install-ubuntu-aliases

## FUTURE: install other CLIs here (e.g. Magento, PrestaShop, etc)

####################################################################################################
#### SS-Install: Install Nginx + FastCGI Cache + OpenSSL + Let's Encrypt ###########################
####################################################################################################

## the Nginx installer includes OpenSSL and Let's Encrypt configuration to avoid errors ##
## default settings allow for extremely high-traffic so Cloudflare is recommended ##

## run ss-install-nginx ##
source /var/www/ss-install-nginx

## run ss-encrypt (now included in ss-install-nginx) ##
# source /var/www/ss-encrypt

####################################################################################################
#### SS-Install: Install OpenSSL + Certbot (Let's Encrypt) Free SSL Certificates ###################
####################################################################################################

## since ss-encrypt runs every few weeks (or months) we avoid aggressive reinstall there ##
## for a cleaner SSL reinstall run ss-install or ss-update instead of ss-encrypt ##

## required to install Certbot on Ubuntu 18.04 ##
if [[ "${UBUNTU_VERSION}" = "18.04" ]]; then
    apt install software-properties-common
    add-apt-repository universe
    add-apt-repository ppa:certbot/certbot ## Ubuntu 20.04 includes Certbot
    apt update
fi

## clean reinstall for Ubuntu 20.04 ##
if [[ "${UBUNTU_VERSION}" = "20.04" ]]; then
    apt remove certbot 
    apt remove python3-certbot-nginx
    add-apt-repository --remove ppa:certbot/certbot ## just in case (shouldn't exist)
fi

## install Certbot ##
apt install certbot python3-certbot-nginx

## run ss-encrypt ##
source /var/www/ss-encrypt

####################################################################################################
#### SS-Install: Install MySQL (Single Database Only) + Users ######################################
####################################################################################################

## here we install MySQL server (no client) and users based on the ss-config settings ##
## root@localhost will use sockets and PHP apps will connect via 127.0.0.1 ##

## run ss-install-mysql ##
source /var/www/ss-install-mysql

####################################################################################################
#### SS-Install: Install Redis Server + PHP-Redis (For PHP-FPM) Extension ##########################
####################################################################################################

## Redis is only installed to enable our default (optional) Object Cache (MU plugin) ##
## full page caching is provided solely by Nginx FastCGI and not by Redis ##

## run ss-install-redis ##
source /var/www/ss-install-redis
 
####################################################################################################
#### SS-Install: Install WordPress + Configure WP-Config File ######################################
####################################################################################################

## FUTURE: check SS_APP first

## this script fetches the latest stable version of WordPress from SlickStack mirrors ##
## major releases (unpatched) are never considered stable for our purposes ##

## run ss-install-wordpress-core ##
source /var/www/ss-install-wordpress-core

## run ss-install-wordpress-config ##
source /var/www/ss-install-wordpress-config

####################################################################################################
#### SS-Install: Install MU (Must-Use) WordPress Plugins #####################################3#####
####################################################################################################

## FUTURE: check SS_APP first

## this will install the designated MU plugins and also Custom Functions and Object Cache ##
## with a few exceptions these can all be customized using ss-config settings ##

## run ss-install-wordpress-mu-plugins (formerly ss-muplugs) ##
source /var/www/ss-install-wordpress-mu-plugins

####################################################################################################
#### SS-Install: Install Adminer (phpMyAdmin) ######################################################
####################################################################################################

## should be installed after PHP-FPM and Nginx modules to ensure proper installation ##
## Adminer (similar to phpMyAdmin) can be publicly accessed at /adminer URI ##

## run ss-install-adminer ##
source /var/www/ss-install-adminer

####################################################################################################
#### SS-Install: Install ClamAV Antivirus ##########################################################
####################################################################################################

## this will install ClamAV for occassional malware logging: /var/www/logs/clamav.log ##
## keep in mind that infected files are not automatically cleaned or deleted ##

## run ss-install-clamav ##
source /var/www/ss-install-clamav

####################################################################################################
#### SS-Install: Optimize The Linux (Ubuntu) System Kernel #########################################
####################################################################################################

## we save this for near last just in case the kernel gets messed up and requires fixing ##
## in SlickStack the kernel is modified to pretty much uncap all limitations ##

## run ss-install-ubuntu-kernel ##
source /var/www/ss-install-ubuntu-kernel

####################################################################################################
#### SS-Install: Install UFW Firewall + Configure Firewall Rules ###################################
####################################################################################################

## here we install and configure the very simple UFW Firewall that Ubuntu maintains ##
## only ports 80, 443, and your designated SSH port (6969) will be allowed ##

## run ss-install-ufw ##
source /var/www/ss-install-ufw

####################################################################################################
#### SlickStack: Finish Up Installation + Confirmation Message #####################################
####################################################################################################

## not a virgin install anymore ##
mkdir /var/www/meta/ && touch /var/www/meta/.cherry

## run scripts ##
source /var/www/ss-purge
source /var/www/ss-perms

## reset all logs to NULL ##
cat /dev/null > /var/www/logs/clamav.log
cat /dev/null > /var/www/logs/error.log
cat /dev/null > /var/www/logs/mysql.log
cat /dev/null > /var/www/logs/nginx.log
cat /dev/null > /var/www/logs/redis.log

## restart services ##
source /var/www/ss-restart

####################################################################################################
#### SS-Install: Printout Of Critical SS-Config Settings ###########################################
####################################################################################################

## here we simply echo the most important settings from ss-config being currently used ##
## this allows you to easily copy/paste for your records (or for your client) ##

## display critical ss-config variables ##
echo -e ""
echo -e "${LIGHTGREEN}###########################################################################${NOCOLOR}"
echo -e "${LIGHTGREEN}#### Here are your current ss-config settings: ############################${NOCOLOR}"
echo -e "${LIGHTGREEN}###########################################################################${NOCOLOR}"
echo -e ""
echo -e "${DARKGREEN}site tld: ${LIGHTGREEN}${BOLD}$SITE_TLD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}site domain: ${LIGHTGREEN}${BOLD}$SITE_DOMAIN${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}site noindex: ${LIGHTGREEN}${BOLD}$SITE_NOINDEX${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}staging site: ${LIGHTGREEN}${BOLD}$STAGING_SITE${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sudo user: ${LIGHTGREEN}${BOLD}$SUDO_USER${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sudo password: ${LIGHTGREEN}${BOLD}$SUDO_PASSWORD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sftp user: ${LIGHTGREEN}${BOLD}$SFTP_USER${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sftp password: ${LIGHTGREEN}${BOLD}$SFTP_PASSWORD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}ssh/sftp port: ${LIGHTGREEN}${BOLD}$SSH_PORT${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db name: ${LIGHTGREEN}${BOLD}$DB_NAME${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db user: ${LIGHTGREEN}${BOLD}$DB_USER${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db password: ${LIGHTGREEN}${BOLD}$DB_PASSWORD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db admin user (i.e. alt-root user for Adminer, etc): ${LIGHTGREEN}${BOLD}admin@127.0.0.1${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db admin password: ${LIGHTGREEN}${BOLD}$DB_PASSWORD_ROOT${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db host: ${LIGHTGREEN}${BOLD}$DB_HOST${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db prefix: ${LIGHTGREEN}${BOLD}$DB_PREFIX${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}wp multisite: ${LIGHTGREEN}${BOLD}$WP_MULTISITE${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}wp multisite subdomains: ${LIGHTGREEN}${BOLD}$WP_MULTISITE_SUBDOMAINS${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}wp multisite domain mapping: ${LIGHTGREEN}${BOLD}$WP_MULTISITE_DOMAIN_MAPPING${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}cloudflare api key: ${LIGHTGREEN}${BOLD}$CLOUDFLARE_API_KEY${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}cloudflare api email: ${LIGHTGREEN}${BOLD}$CLOUDFLARE_API_EMAIL${NORMAL}${NOCOLOR}"

if [[ "$SSH_KEYS" == "true" ]]; then 
    echo -e ""
    echo -e "${YELLOW}Since you enabled SSH keys be sure to upload your public key to: /var/www/meta/.ssh/authorized_keys${NOCOLOR}"
    echo -e ""
fi
    
## confirm installation complete ##
echo -e ""
echo -e "${NORMAL}${LIGHTGREEN}SlickStack installation complete! Please ${BOLD}sudo reboot${NORMAL}${LIGHTGREEN} server and ensure CloudFlare is activated with ${BOLD}Full SSL${NORMAL}${LIGHTGREEN} mode. Cheers!${NOCOLOR}"
echo -e ""

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: http://wproller.com ##
## Ref: https://github.com/bjornjohansen/deploy-wp-on-vps/blob/master/deploy.sh ##
## Ref: https://github.com/sm0k3net/Useful-Scripts/blob/master/wordpress.sh ##
## Ref: https://github.com/techandme/wordpress-vm ##
## Ref: https://github.com/QROkes/webinoly ##
## Ref: https://github.com/WordOps/WordOps ##
## Ref: https://www.isicca.com/en/lemp-howto-install-nginx-php7-mariadb/ ##
## Ref: https://gist.github.com/FeChagas/54b0cdf354b197dc8e417357d7687e8b ##
## Ref: https://github.com/GeekPress/WP-Quick-Install ##
## Ref: https://github.com/bajpangosh/High-Traffic-wordpress-server-configuration ##
## Ref: https://gist.github.com/nickfox-taterli/2c283d73ba817392fb0f9f15d9cfa514 ##
## Ref: https://gist.github.com/beardedinbinary/79d7ad34f9980f0a4c23 ##
## Ref: https://www.linuxbabe.com/security/letsencrypt-webroot-tls-certificate
## Ref: https://stackoverflow.com/questions/49668542/create-a-script-that-adds-lines-of-code-to-bashrc-then-reloads-the-terminal
## Ref: https://peteris.rocks/blog/unattended-installation-of-wordpress-on-ubuntu-server/
## Ref: https://serverfault.com/questions/783527/non-interactive-silent-install-of-mysql-5-7-on-ubuntu-16-04-lts/830352#830352
## Ref: https://www.percona.com/blog/2016/10/18/upgrading-to-mysql-5-7-beware-of-the-new-strict-mode/
## Ref: https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
## Ref: https://serverfault.com/questions/773964/calculating-the-percentage-of-the-total-available-memory-on-linux-as-an-integer
## Ref: https://stackoverflow.com/questions/29271593/bash-check-for-amount-of-memory-installed-on-a-system-as-sanity-check
## Ref: https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0
## Ref: https://stackoverflow.com/questions/28118296/bash-script-is-super-slow
## Ref: https://stackoverflow.com/questions/15445361/speeding-up-bash-scripts
## Ref: https://unix.stackexchange.com/questions/67057/bash-script-optimization-of-processing-speed
## Ref: https://unix.stackexchange.com/questions/313256/why-write-an-entire-bash-script-in-functions
## Ref: http://nginx.org/en/linux_packages.html
## Ref: https://www.digitalocean.com/community/questions/nginx-stable-or-mainline-for-production-server
## Ref: https://precisionsec.com/changing-the-wordpress-site-url-using-the-mysql-command-line/
## Ref: https://magc.co/box/notes/change-wp-urls-mysql/
## Ref: https://wordpress.stackexchange.com/questions/281814/wordpress-multisite-redirecting-to-wp-signup-php
## Ref: https://wordpress.stackexchange.com/questions/165507/site-redirecting-to-wp-signup-php
## Ref: https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal
## Ref: https://www.computerhope.com/unix/rsync.htm
## Ref: https://lowendbox.com/blog/wordpress-cheap-vps-lowendscript/
## Ref: https://unix.stackexchange.com/questions/67057/bash-script-optimization-of-processing-speed
## Ref: http://www.los-gatos.ca.us/davidbu/faster_sh.html
## Ref: https://blog.eduonix.com/shell-scripting/learn-how-to-write-interactive-shell-scripts/
## Ref: https://www.stefanjudis.com/today-i-learned/how-to-add-interactive-questions-to-bash-scripts/
## Ref: https://askubuntu.com/questions/998640/bash-interactive-script
## Ref: https://ryanstutorials.net/bash-scripting-tutorial/bash-input.php
## Ref: http://www.linfo.org/clear.html
## Ref: https://gist.github.com/jonsuh/3c89c004888dfc7352be
## Ref: https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash/2924755
## Ref: https://medium.com/@jasonrigden/cowsay-is-the-most-important-unix-like-command-ever-35abdbc22b7f
## Ref: https://stackoverflow.com/questions/37052899/what-is-the-preferred-method-to-echo-a-blank-line-in-a-shell-script
## Ref: https://tldp.org/LDP/abs/html/options.html
## Ref: https://fernandobasso.dev/shell/shell-script-input-default-values.html
## Ref: https://stackoverflow.com/questions/10735574/include-source-script-if-it-exists-in-bash
## Ref: https://scripter.co/count-down-timer-in-shell/
## Ref: https://stackoverflow.com/questions/4332478/read-the-current-text-color-in-a-xterm/4332530#4332530
## Ref: https://stackoverflow.com/questions/24998434/read-command-display-the-prompt-in-color-or-enable-interpretation-of-backslas
## Ref: https://stackoverflow.com/questions/714915/using-the-passwd-command-from-within-a-shell-script/715802#comment52196688_19745733
## Ref: https://askubuntu.com/questions/1214103/how-to-automate-changing-old-password
## Ref: https://unix.stackexchange.com/questions/223965/i-cant-change-users-passwd-on-ubuntu
## Ref: https://www.tecmint.com/fix-passwd-authentication-token-manipulation-error-in-linux/
## Ref: https://stackoverflow.com/questions/4332478/read-the-current-text-color-in-a-xterm/4332530#4332530
## Ref: https://medium.com/@smohajer85/bash-scripting-tutorial-part-11-8ce0c17b01c1
## Ref: https://linuxhint.com/tput-printf-and-shell-expansions-how-to-create-awesome-outputs-with-bash-scripts/
## Ref: https://stackoverflow.com/questions/8467424/echo-newline-in-bash-prints-literal-n
## Ref: https://askubuntu.com/questions/420784/what-do-the-disabled-login-and-gecos-options-of-adduser-command-stand
## Ref: https://stackoverflow.com/questions/55822739/does-echo-userpass-usr-sbin-chpasswd-override-the-root-password
## Ref: https://stackoverflow.com/questions/8110530/check-free-disk-space-for-current-partition-in-bash

## SS_EOF
