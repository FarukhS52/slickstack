#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-install.txt ###########################################
#### path: /var/www/ss-install #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls the entire SlickStack server and all LEMP modules, etc (idempotent) #######
#### module version: Ubuntu 20.04 LTS ##############################################################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED (AND CURRENT BUILD) BEFORE RUNNING SS-INSTALL ##
## ENSURE SS-CONFIG OPTIONS REMAIN CURRENT BY RUNNING SS-UPDATE OCCASIONALLY ##

## include SlickStack configuration ##
source /var/www/ss-config

####################################################################################################
#### SlickStack: Critical Bash Functions (Aliases) For This Script To Work #########################
####################################################################################################

## the below functions are hardcoded into every SlickStack script to ensure reliability ##
## this also speeds up processing times by avoiding repeated inline commands ##

## variables ##
UBUNTU_VERSION=`lsb_release -rs`

## apt alias flags ##
function apt {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/apt --yes --quiet --option Dpkg::Options::=--force-confold --option Dpkg::Options::=--force-confdef "$@"
}

## add-apt-repository alias flags ##
function add-apt-repository {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/add-apt-repository --yes "$@"
}

## wget alias flags ##
function wget {
    command wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 "$@"
}

## mysql alias flags ##
function mysql {
    command mysql --user=root --host=localhost --protocol=socket --port=3306 --force "$@"
}

## cp alias flags ##
function cp {
    command cp -R -f -d --no-preserve=mode,ownership "$@"
}

## rsync alias flags ##
function rsync {
    command rsync -aI --ignore-errors "$@"
}

## unzip alias flags ##
function unzip {
    command unzip -o "$@"
}

## mkdir alias flags ##
function mkdir {
    command mkdir -p "$@"
}

## rm alias flags ##
function rm {
    command rm -R -f "$@"
}

## ln alias flags ##
function ln {
    command ln -s -f "$@"
}

####################################################################################################
#### SlickStack: Pretty Colors Make The Shell More Pleasing ########################################
####################################################################################################

## these color variables help maintain cleaner and prettier Bash scripts in SlickStack ##
## we substitute e.g. ${BLUE} within an echo line then use ${NOCOLOR} to revert ##

## pretty Bash colors ##
NOCOLOR='\033[0m'
DARKRED='\033[0;31m'
LIGHTRED='\033[1;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
DARKGREEN='\033[0;32m'
LIGHTGREEN='\033[1;32m'
DARKCYAN='\033[0;36m'
LIGHTCYAN='\033[1;36m'
DARKBLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
DARKPURPLE='\033[0;35m'
LIGHTPURPLE='\033[1;35m'
DARKGRAY='\033[1;30m'
LIGHTGRAY='\033[0;37m'
WHITE='\033[1;37m'

## pretty Bash styles ##
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

####################################################################################################
#### SS-Install: Check OS Compability + Verify SS-Config Freshness + Backup Database ###############
####################################################################################################

## NEVER RUN SS-INSTALL UNLESS BUILD VERSION BELOW MATCHES CURRENT SS-CONFIG BOILERPLATE ##
## IN CASE OF EMERGENCY CONFLICTS THE SLICKSTACK TEAM MIGHT MISMATCH SAID BUILDS ##

## verify correct Ubuntu version ##
if [[ "${UBUNTU_VERSION}" != "20.04" ]]; then
    echo -e "${YELLOW}SS-INSTALL: SlickStack is designed for ${BOLD}Ubuntu 20.04${NORMAL}, but this server is running ${BOLD}Ubuntu ${UBUNTU_VERSION}${NORMAL}.${NOCOLOR}" >&2
    exit 1
fi

## ensure ss-config version matches ss-install version (if ss-config exists) ##
if [[ -f "/var/www/ss-config" ]] && [[ "$SS_BUILD" != "AUG2020F" ]]; then 
    echo -e "${YELLOW}SS-INSTALL: It appears your ${BOLD}ss-config${NORMAL} file is outdated. Please run ${BOLD}ss-update${NORMAL} and then run ${BOLD}ss-install${NORMAL} again.${NOCOLOR}" >&2
    exit 1
fi

## ensure enough disk space exists before proceeding ##
# COMING SOON

## backup database before proceeding (if ss-config exists) ##
if [[ -f "/var/www/ss-config" ]]; then
source /var/www/ss-dump
fi

####################################################################################################
#### SS-Install: Interactive Bash Setup Wizard (SS-Config) #########################################
####################################################################################################

## this basic wizard will allow you to interactively setup your ss-config file options ##
## advanced users can setup ss-config before running ss-install to avoid this ##

## f*ck containers (first things first) ##
echo -e ""
echo -e "${LIGHTPURPLE} __________________ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}< f*ck containers! excelsior > ${NOCOLOR}"
echo -e "${LIGHTPURPLE} ------------------ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}        \   ^__^ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}         \  (oo)\_______ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}            (__)\       )\/\ ${NOCOLOR}"
echo -e "${LIGHTPURPLE}                ||----w | ${NOCOLOR}"
echo -e "${LIGHTPURPLE}                ||     || ${NOCOLOR}"
echo -e ""

## rainbow colors test ##
RAINBOW="${DARKRED}darkred ${LIGHTRED}lightred ${ORANGE}orange ${YELLOW}yellow ${DARKGREEN}darkgreen ${LIGHTGREEN}lightgreen ${DARKCYAN}darkcyan ${LIGHTCYAN}lightcyan ${DARKBLUE}darkblue ${LIGHTBLUE}lightblue ${DARKPURPLE}darkpurple ${LIGHTPURPLE}lightpurple ${DARKGRAY}darkgray ${LIGHTGRAY}lightgray ${WHITE}white${NOCOLOR}"
echo -e "$RAINBOW"

if [ ! -f "/var/www/ss-config" ]; then
    ## tell the user we will attempt the wizard ##
    echo -e "${YELLOW}SS-INSTALL: It appears your ${BOLD}ss-config${NORMAL}${YELLOW} file has not been setup yet, please follow this wizard to configure options:${NOCOLOR}" >&2
    sleep 10s
    echo
    echo -e "============================================================"
    echo -e "SlickStack: Interactive Bash Setup Wizard (SS-Config)"
    echo -e "============================================================"

    ## ensure SlickStack root directory exists (in case running ss-install from other directories) ##
    mkdir /var/www
    ## get latest ss-config boilerplate ##
    wget -O /tmp/ss-config http://mirrors.slickstack.io/ss-config-sample.txt
    
    ## replace all password fields with random strings ##
    sed -i "s/@ROOT_PASSWORD/$(openssl rand -hex 12)/g" /tmp/ss-config
    sed -i "s/@SUDO_PASSWORD/$(openssl rand -hex 12)/g" /tmp/ss-config
    sed -i "s/@SFTP_PASSWORD/$(openssl rand -hex 12)/g" /tmp/ss-config
    sed -i "s/@DB_PASSWORD_USER/$(openssl rand -hex 12)/g" /tmp/ss-config
    sed -i "s/@DB_PASSWORD_ROOT/$(openssl rand -hex 12)/g" /tmp/ss-config
    
    ## PROMPT: choose sudo username (otherwise will randomize) ##
    read -p 'Choose sudo username (e.g. batman): ' ss_var_sudo_user
    sed -i "s/@SUDO_USER/$ss_var_sudo_user/g" /tmp/ss-config
    
    ## PROMPT: choose SSH port number (otherwise 6969) ##
    read -p 'Choose SSH port (6969): ' ss_var_ssh_port
    sed -i "s/@SSH_PORT/$ss_var_ssh_port/g" /tmp/ss-config
    
    ## PROMPT: enable SSH keys (otherwise disabled) ##
    read -p 'Enable SSH keys (false/true): ' ss_var_ssh_keys
    sed -i "s/@SSH_KEYS/$ss_var_ssh_keys/g" /tmp/ss-config
    
    ## PROMPT: choose SFTP username (otherwise will randomize) ##
    read -p 'Choose SFTP username (e.g. robin): ' ss_var_sftp_user
    sed -i "s/@SFTP_USER/$ss_var_sftp_user/g" /tmp/ss-config
    
    ## PROMPT: choose database name (otherwise will be wordpress) ##
    read -p 'Choose database name (wordpress): ' ss_var_db_name
    sed -i "s/@DB_NAME/$ss_var_db_name/g" /tmp/ss-config
    
    ## PROMPT: choose database user (otherwise will randomize) ##
    read -p 'Choose database user (e.g. robin): ' ss_var_db_user
    sed -i "s/@DB_USER/$ss_var_db_user/g" /tmp/ss-config
    
    ## PROMPT: choose database host (otherwise 127.0.0.1) ##
    read -p 'Choose database host (127.0.0.1): ' ss_var_db_host
    sed -i "s/@DB_HOST/$ss_var_db_host/g" /tmp/ss-config
    
    ## PROMPT: choose database prefix (otherwise wp_) ##
    read -p 'Choose database prefix (wp_): ' ss_var_db_prefix
    sed -i "s/@DB_PREFIX/$ss_var_db_prefix/g" /tmp/ss-config
    
    ## PROMPT: choose database charset (otherwise utf8mb4) ##
    # read -p 'Choose database charset (utf8mb4): ' ss_var_db_charset
    
    ## PROMPT: choose database collate (otherwise blank) ##
    # read -p 'Choose database collate (*empty*): ' ss_var_db_collate
    
    ## PROMPT: choose site TLD (otherwise example.com) ##
    read -p 'Choose site TLD domain (e.g. example.com without prefixes or subdomains, etc): ' ss_var_site_tld
    sed -i "s/@SITE_TLD/$ss_var_site_tld/g" /tmp/ss-config
    
    ## PROMPT: choose site domain (otherwise www.example.com) ##
    read -p 'Choose site live domain (e.g. www.example.com with desired prefix or subdomain, etc (no subdirectories allowed)): ' ss_var_site_domain
    sed -i "s/@SITE_DOMAIN/$ss_var_site_domain/g" /tmp/ss-config
    
    ## PROMPT: enable noindex server (otherwise disabled) ##
    read -p 'Enable site noindexing (false/true): ' ss_var_site_noindex
    sed -i "s/@SITE_NOINDEX/$ss_var_site_noindex/g" /tmp/ss-config
    
    ## Multisite not supported yet ##
    ## PROMPT: enable WP multisite (otherwise disabled) ##
    # read -p 'Enable WP multisite (no): ' ss_var_wp_multisite
    
    ## PROMPT: disable WP multisite subdomains (otherwise enabled) ##
    # read -p 'Enable WP multisite subdomains (yes): ' ss_var_wp_multisite_subdomains
    
    ## PROMPT: enable WP multisite domain mapping (otherwise disabled) ##
    # read -p 'Enable WP multisite domain mapping (no): ' ss_var_wp_multisite_domain_mapping
    
    ## PROMPT: choose Cloudflare API key (otherwise 123456789) ##
    read -p 'Choose Cloudflare API key (e.g. 123456789): ' ss_var_cloudflare_api_key
    sed -i "s/@CLOUDFLARE_API_KEY/$ss_var_cloudflare_api_key/g" /tmp/ss-config
    
    ## PROMPT: choose Cloudflare API email (otherwise user@example.com) ##
    read -p 'Choose Cloudflare API email (e.g. user@example.com): ' ss_var_cloudflare_api_email
    sed -i "s/@CLOUDFLARE_API_EMAIL/$ss_var_cloudflare_api_email/g" /tmp/ss-config
    
    ## PROMPT: enable native staging site features ##
    read -p 'Enable native staging site? (true/false): ' ss_var_staging_site
    sed -i "s/@STAGING_SITE/$ss_var_staging_site/g" /tmp/ss-config
    
    ## copy files to their destinations ##
    cp /tmp/ss-config /var/www/ss-config
    
    # echo -e "\e[36mThis wizard is under construction... your ss-config is not fully setup yet, please finalize ss-config and then run ss-install again...\e[0m"
    # exit 1
else
    echo -e "${YELLOW}SS-INSTALL: It looks like your ss-config file exists already, so we will proceed with ss-install using those options...${NOCOLOR}"
fi

####################################################################################################
#### SS-Install: Configure Ubuntu (SlickStack) Users + Set Various System Defaults #################
####################################################################################################

## MESSAGE ##
echo "${LIGHTPURPLE}SS-INSTALL: Configuring users, permissions and Ubuntu defaults...${NOCOLOR}"

## set root password ##
echo root:$ROOT_PASSWORD | /usr/sbin/chpasswd

## ensure root password never expires ##
# passwd -x -1 <username>
chage -E -1 -m 0 -M -1 -I -1 -W 99999 root
# chage -E -1 -m 0 -M -1 -I -1 -W 99999 $SUDO_USER
# chage -E -1 -m 0 -M -1 -I -1 -W 99999 $SFTP_USER

## create sudo user ##
adduser --disabled-password --gecos "" $SUDO_USER
echo $SUDO_USER:$SUDO_PASSWORD | /usr/sbin/chpasswd

## create sftp user ##
adduser --disabled-password --gecos "" $SFTP_USER
echo $SFTP_USER:$SFTP_PASSWORD | /usr/sbin/chpasswd

## set default editor to nano ##
update-alternatives --set editor /bin/nano

## set timezone ##
if [[ -z "$SS_TIMEZONE" ]]; then 
    timedatectl set-timezone UTC
else 
    timedatectl set-timezone $SS_TIMEZONE
fi

####################################################################################################
#### SS-Install: Download Latest SlickStack Core Scripts + Cron Jobs (Via SS-Check) ################
####################################################################################################

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-INSTALL: Retrieving latest SlickStack files and copying them to local server...${NOCOLOR}"

## download latest versions ##
wget -O /tmp/ss-check http://mirrors.slickstack.io/ss-check.txt

## copy files to their destinations ##
cp /tmp/ss-check /var/www/ss-check

## reset permissions ##
chown root:root /var/www/ss-check
chmod 6770 /var/www/ss-check

## run scripts ##
source /var/www/ss-check

####################################################################################################
#### SS-Install: Configure Ubuntu Root + Sudo User Permissions (Sudoers File) ######################
####################################################################################################

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-INSTALL: Configuring the Sudoers file (root and sudo users)...${NOCOLOR}"

## download latest versions ##
wget -O /tmp/sudoers http://mirrors.slickstack.io/ubuntu/sudoers.txt

## replace variables ##
sed -i "s/@SUDO_USER/${SUDO_USER}/g" /tmp/sudoers

## copy files to their destinations ##
cp /tmp/sudoers /etc/sudoers

## reset permissions ##
chown root:root /etc/sudoers
chmod 0440 /etc/sudoers

####################################################################################################
#### Configure Ubuntu: SSH + SFTP Settings (a.k.a. SSHD Configuration) #############################
####################################################################################################

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-INSTALL: Configuring SSH (SFTP) settings, user permissions, and port number...${NOCOLOR}"

## download latest versions ##
wget -O /tmp/sshd_config http://mirrors.slickstack.io/ubuntu/sshd-config.txt

## replace variables ##
sed -i "s/@SUDO_USER/${SUDO_USER}/g" /tmp/sshd_config
sed -i "s/@SFTP_USER/${SFTP_USER}/g" /tmp/sshd_config

## set SSH port number (optional) ##
if [[ -z "$SSH_PORT" ]]; then 
    sed -i "s/@SSH_PORT/6969/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PORT/${SSH_PORT}/g" /tmp/sshd_config
fi

## enable/disable password authentication (depending on if SSH_KEYS is enabled) ##
if [[ "$SSH_KEYS" == "true" ]]; then 
    sed -i "s/@SSH_PASSWORD_AUTHENTICATION/no/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PASSWORD_AUTHENTICATION/yes/g" /tmp/sshd_config
fi

## enable/disable public key authentication (depending on if SSH_KEYS is enabled) ##
if [[ "$SSH_KEYS" == "true" ]]; then 
    sed -i "s/@SSH_PUBKEY_AUTHENTICATION/yes/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PUBKEY_AUTHENTICATION/no/g" /tmp/sshd_config
fi

## allow IPv6 SSH sessions (any) if no IPv4 address is detected on the server ##
# if [[ CURRENT IP ADDRESS IS IPV6 ONLY ]]; then 
#    sed -i "s/AddressFamily inet/AddressFamily any/g" /tmp/sshd_config
# fi
## Ref: https://stackoverflow.com/questions/5281341/get-local-network-interface-addresses-using-only-proc
## Ref: https://stackoverflow.com/questions/39983121/how-to-detect-if-system-has-ipv6-enabled-in-a-unix-shell-script
## Ref: https://www.cyberciti.biz/faq/bash-shell-command-to-find-get-ip-address/

## copy files to their destinations ##
cp /tmp/sshd_config /etc/ssh/sshd_config

## reset permissions ##
chown root:root /etc/ssh/sshd_config
chmod 0440 /etc/ssh/sshd_config

mkdir /var/www/meta/.ssh
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh
chmod 0755 /var/www/meta/.ssh ## should be 0775 as per Ubuntu docs

touch /var/www/meta/.ssh/authorized_keys
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh/authorized_keys
chmod 0664 /var/www/meta/.ssh/authorized_keys ## should be 0664 as per Ubuntu docs

## restart services ##
/etc/init.d/ssh restart

####################################################################################################
#### SlickStack: Set Dpkg Basic Settings + Update Apt (Package) Cache ##############################
####################################################################################################

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-INSTALL: Set dpkg to noneractive and force confold and update apt cache...${NOCOLOR}"

## set confold as dpkg default (fail-safe in case apt upgrade called directly) ##
DEBIAN_FRONTEND=noninteractive dpkg --configure -a --force-confold

## update repo cache ##
apt update

####################################################################################################
#### SS-Install: Install SlickStack (Ubuntu) Root Crontab File #####################################
####################################################################################################

## cron should be installed by default on Ubuntu but this script will install it if not ##
## it will also install root crontab and core cron jobs from SlickStack mirrors ##

## run ss-install-cron ##
source /var/www/ss-install-cron

####################################################################################################
#### SlickStack: Install Various Modules Via Default Ubuntu Packages ###############################
####################################################################################################

## MESSAGE ##
echo -e "${LIGHTPURPLE}SS-INSTALL: Installing various SlickStack modules from most recent Ubuntu repos...${NOCOLOR}"

## upgrade installed Ubuntu packages (LEMP modules) + Linux kernel (apt feature) ##
apt full-upgrade

## run ss-install-misc ##
source /var/www/ss-install-misc

####################################################################################################
#### Install Cerbot (Let's Encrypt) Packages Via PPA Repos #########################################
####################################################################################################

## install software-properties-common (for Certbot) ##
# apt install software-properties-common

## add custom PPAs (for Certbot) ##
# add-apt-repository universe
# add-apt-repository ppa:certbot/certbot ## Ubuntu 20.04 now includes Certbot

## update again after adding custom ppas ##
# apt update

apt remove certbot 
add-apt-repository --remove ppa:certbot/certbot

## install Certbot ##
apt install certbot python3-certbot-nginx

####################################################################################################
#### SS-Install: Install PHP-FPM 7.4.x + Required PHP Extensions ###################################
####################################################################################################

## run ss-install-php ##
source /var/www/ss-install-php

####################################################################################################
#### SS-Install: Install WP-CLI Bash Aliases [wp] + SlickStack Bash Aliases [ss] ###################
####################################################################################################

## run ss-install-bash ##
source /var/www/ss-install-bash

####################################################################################################
#### SlickStack: Install Nginx Server + FastCGI Cache + OpenSSL ####################################
####################################################################################################

## run ss-install-nginx ##
source /var/www/ss-install-nginx

####################################################################################################
#### SS-Install: Install OpenSSL + Certbot (Let's Encrypt) Free SSL Certificates ###################
####################################################################################################

## run ss-encrypt ##
source /var/www/ss-encrypt

####################################################################################################
#### SS-Install: Install MySQL 8.0.x (Single Database Only) ########################################
####################################################################################################

## run ss-install-mysql ##
source /var/www/ss-install-mysql
 
####################################################################################################
#### SlickStack: Install WordPress (Prod) + Configure WP-Config File (Prod + Staging) ##############
####################################################################################################

## this script fetches the latest stable version of WordPress from SlickStack mirrors ##
## major releases (unpatched) are never considered stable for our purposes ##

## run ss-install-wordpress ##
source /var/www/ss-install-wordpress

####################################################################################################
#### SlickStack: Install Redis Server + PHP-Redis Extension ########################################
####################################################################################################

## run ss-install-redis ##
source /var/www/ss-install-redis

####################################################################################################
#### SS-Install: Install MU (Must-Use) Plugins (After PHP-FPM And Redis Installed) #################
####################################################################################################

## run ss-muplugs ##
source /var/www/ss-install-muplugins

####################################################################################################
#### SS-Install: Install Adminer (phpMyAdmin) ######################################################
####################################################################################################

## run ss-install-adminer ##
source /var/www/ss-install-adminer

####################################################################################################
#### SS-Install: Install ClamAV Antivirus ##########################################################
####################################################################################################

## run ss-install-clamav ##
source /var/www/ss-install-clamav

####################################################################################################
#### Configure Ubuntu: Optimize The System Kernel ##################################################
####################################################################################################

## delete tmp files ##
rm /tmp/sysctl*

## backup current Ubunt kernel file ##
cp /etc/sysctl.conf /etc/sysctl.conf.bak

## download latest versions ##
wget -O /tmp/sysctl.conf http://mirrors.slickstack.io/ubuntu/sysctl.txt

## copy files to their destinations ##
cp /tmp/sysctl.conf /etc/sysctl.conf

## reset permissions ##
chown root:root /etc/sysctl.conf
chmod 0664 /etc/sysctl.conf

####################################################################################################
#### SS-Install: Install UFW Firewall + Configure Firewall Rules ###################################
####################################################################################################

source /var/www/ss-install-ufw

####################################################################################################
#### SlickStack: Finish Up Installation + Confirmation Message #####################################
####################################################################################################

## not a virgin install anymore ##
mkdir /var/www/meta/ && touch /var/www/meta/.cherry

## run scripts ##
source /var/www/ss-purge
source /var/www/ss-perms

## reset all logs to NULL ##
cat /dev/null > /var/www/logs/clamav.log
cat /dev/null > /var/www/logs/error.log
cat /dev/null > /var/www/logs/mysql.log
cat /dev/null > /var/www/logs/nginx.log
cat /dev/null > /var/www/logs/redis.log

## restart services ##
source /var/www/ss-restart

####################################################################################################
#### SS-Install: Printout Of Critical SS-Config Settings ###########################################
####################################################################################################

## here we simply echo the most important settings from ss-config being currently used ##
## this allows you to easily copy/paste for your records (or for your client) ##

## display critical ss-config variables ##
echo -e ""
echo -e "${LIGHTGREEN}####################################################################################################${NOCOLOR}"
echo -e "${LIGHTGREEN}#### Here are your current ss-config settings (copy/paste for reference as needed): ################${NOCOLOR}"
echo -e "${LIGHTGREEN}####################################################################################################${NOCOLOR}"
echo -e ""
echo -e "${DARKGREEN}site tld: ${LIGHTGREEN}${BOLD}$SITE_TLD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}site domain: ${LIGHTGREEN}${BOLD}$SITE_DOMAIN${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}site noindex: ${LIGHTGREEN}${BOLD}$SITE_NOINDEX${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}staging site: ${LIGHTGREEN}${BOLD}$STAGING_SITE${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sudo user: ${LIGHTGREEN}${BOLD}$SUDO_USER${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sudo password: ${LIGHTGREEN}${BOLD}$SUDO_PASSWORD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sftp user: ${LIGHTGREEN}${BOLD}$SFTP_USER${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}sftp password: ${LIGHTGREEN}${BOLD}$SFTP_PASSWORD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}ssh/sftp port: ${LIGHTGREEN}${BOLD}$SSH_PORT${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db name: ${LIGHTGREEN}${BOLD}$DB_NAME${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db user: ${LIGHTGREEN}${BOLD}$DB_USER${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db password: ${LIGHTGREEN}${BOLD}$DB_PASSWORD${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db admin user (i.e. alt-root user for Adminer, etc): ${LIGHTGREEN}${BOLD}admin@127.0.0.1${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db admin password: ${LIGHTGREEN}${BOLD}$DB_PASSWORD_ROOT${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db host: ${LIGHTGREEN}${BOLD}$DB_HOST${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}db prefix: ${LIGHTGREEN}${BOLD}$DB_PREFIX${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}wp multisite: ${LIGHTGREEN}${BOLD}$WP_MULTISITE${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}wp multisite subdomains: ${LIGHTGREEN}${BOLD}$WP_MULTISITE_SUBDOMAINS${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}wp multisite domain mapping: ${LIGHTGREEN}${BOLD}$WP_MULTISITE_DOMAIN_MAPPING${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}cloudflare api key: ${LIGHTGREEN}${BOLD}$CLOUDFLARE_API_KEY${NORMAL}${NOCOLOR}"
echo -e "${DARKGREEN}cloudflare api email: ${LIGHTGREEN}${BOLD}$CLOUDFLARE_API_EMAIL${NORMAL}${NOCOLOR}"

if [[ "$SSH_KEYS" == "true" ]]; then 
    echo -e ""
    echo -e "${YELLOW}Since you enabled SSH keys be sure to upload your public key to: /var/www/meta/.ssh/authorized_keys${NOCOLOR}"
    echo -e ""
fi
    
## confirm installation complete ##
echo -e ""
echo -e "${NORMAL}${LIGHTGREEN}SlickStack installation complete! Please ${BOLD}sudo reboot${NORMAL}${LIGHTGREEN} server and ensure CloudFlare is activated with ${BOLD}Full SSL${NORMAL}${LIGHTGREEN} mode. Cheers!${NOCOLOR}"
echo -e ""

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: http://wproller.com ##
## Ref: https://github.com/bjornjohansen/deploy-wp-on-vps/blob/master/deploy.sh ##
## Ref: https://github.com/sm0k3net/Useful-Scripts/blob/master/wordpress.sh ##
## Ref: https://github.com/techandme/wordpress-vm ##
## Ref: https://github.com/QROkes/webinoly ##
## Ref: https://github.com/WordOps/WordOps ##
## Ref: https://www.isicca.com/en/lemp-howto-install-nginx-php7-mariadb/ ##
## Ref: https://gist.github.com/FeChagas/54b0cdf354b197dc8e417357d7687e8b ##
## Ref: https://github.com/GeekPress/WP-Quick-Install ##
## Ref: https://github.com/bajpangosh/High-Traffic-wordpress-server-configuration ##
## Ref: https://gist.github.com/nickfox-taterli/2c283d73ba817392fb0f9f15d9cfa514 ##
## Ref: https://gist.github.com/beardedinbinary/79d7ad34f9980f0a4c23 ##
## Ref: https://www.linuxbabe.com/security/letsencrypt-webroot-tls-certificate
## Ref: https://stackoverflow.com/questions/49668542/create-a-script-that-adds-lines-of-code-to-bashrc-then-reloads-the-terminal
## Ref: https://peteris.rocks/blog/unattended-installation-of-wordpress-on-ubuntu-server/
## Ref: https://serverfault.com/questions/783527/non-interactive-silent-install-of-mysql-5-7-on-ubuntu-16-04-lts/830352#830352
## Ref: https://www.percona.com/blog/2016/10/18/upgrading-to-mysql-5-7-beware-of-the-new-strict-mode/
## Ref: https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
## Ref: https://serverfault.com/questions/773964/calculating-the-percentage-of-the-total-available-memory-on-linux-as-an-integer
## Ref: https://stackoverflow.com/questions/29271593/bash-check-for-amount-of-memory-installed-on-a-system-as-sanity-check
## Ref: https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0
## Ref: https://stackoverflow.com/questions/28118296/bash-script-is-super-slow
## Ref: https://stackoverflow.com/questions/15445361/speeding-up-bash-scripts
## Ref: https://unix.stackexchange.com/questions/67057/bash-script-optimization-of-processing-speed
## Ref: https://unix.stackexchange.com/questions/313256/why-write-an-entire-bash-script-in-functions
## Ref: http://nginx.org/en/linux_packages.html
## Ref: https://www.digitalocean.com/community/questions/nginx-stable-or-mainline-for-production-server
## Ref: https://precisionsec.com/changing-the-wordpress-site-url-using-the-mysql-command-line/
## Ref: https://magc.co/box/notes/change-wp-urls-mysql/
## Ref: https://wordpress.stackexchange.com/questions/281814/wordpress-multisite-redirecting-to-wp-signup-php
## Ref: https://wordpress.stackexchange.com/questions/165507/site-redirecting-to-wp-signup-php
## Ref: https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal
## Ref: https://www.computerhope.com/unix/rsync.htm
## Ref: https://lowendbox.com/blog/wordpress-cheap-vps-lowendscript/
## Ref: https://unix.stackexchange.com/questions/67057/bash-script-optimization-of-processing-speed
## Ref: http://www.los-gatos.ca.us/davidbu/faster_sh.html
## Ref: https://blog.eduonix.com/shell-scripting/learn-how-to-write-interactive-shell-scripts/
## Ref: https://www.stefanjudis.com/today-i-learned/how-to-add-interactive-questions-to-bash-scripts/
## Ref: https://askubuntu.com/questions/998640/bash-interactive-script
## Ref: https://ryanstutorials.net/bash-scripting-tutorial/bash-input.php
## Ref: http://www.linfo.org/clear.html
## Ref: https://gist.github.com/jonsuh/3c89c004888dfc7352be
## Ref: https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash/2924755
## Ref: https://medium.com/@jasonrigden/cowsay-is-the-most-important-unix-like-command-ever-35abdbc22b7f
## Ref: https://stackoverflow.com/questions/37052899/what-is-the-preferred-method-to-echo-a-blank-line-in-a-shell-script

## SS_EOF
